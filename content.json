{"meta":{"title":"WinNote","subtitle":"","description":"零碎MD收集","author":"winotmk","url":"https://winotmk.github.io","root":"/"},"pages":[],"posts":[{"title":"安装ArchLinux系统（详细过程）","slug":"安装Arch","date":"2021-10-25T14:30:01.891Z","updated":"2021-10-25T14:30:01.891Z","comments":true,"path":"2021/10/25/安装Arch/","link":"","permalink":"https://winotmk.github.io/2021/10/25/%E5%AE%89%E8%A3%85Arch/","excerpt":"参考文章：https://zhuanlan.zhihu.com/p/138951848 官方WIKI安装指南（上文和本文大致流程基于此）：https://wiki.archlinux.org/title/Installation_guide 家里旧笔记本淘汰装个Linux跑跑服务发挥余热，这里是彻底格式化硬盘新安装，而不需要多系统引导 我的环境有： 2核 Intel(R) Pentium(R) CPU 997 @ 1.60GHz 4GB 1600内存 UEFI启动（不能为BIOS） Samsang 850 EVO 250G 2.5寸SATA接口 无线网卡拆掉了，用得是网线 路由器上全局梯子（所以我没有换源，用官方源速度足够了） 准备镜像https://archlinux.org/download/下载发行版的Linux的ISO然后制作U盘启动，我是在mac下用balenaEtcher做的，操作非常方便","text":"参考文章：https://zhuanlan.zhihu.com/p/138951848 官方WIKI安装指南（上文和本文大致流程基于此）：https://wiki.archlinux.org/title/Installation_guide 家里旧笔记本淘汰装个Linux跑跑服务发挥余热，这里是彻底格式化硬盘新安装，而不需要多系统引导 我的环境有： 2核 Intel(R) Pentium(R) CPU 997 @ 1.60GHz 4GB 1600内存 UEFI启动（不能为BIOS） Samsang 850 EVO 250G 2.5寸SATA接口 无线网卡拆掉了，用得是网线 路由器上全局梯子（所以我没有换源，用官方源速度足够了） 准备镜像https://archlinux.org/download/下载发行版的Linux的ISO然后制作U盘启动，我是在mac下用balenaEtcher做的，操作非常方便 然后重启电脑从U盘启动 硬盘准备进入U盘系统后先连pacman试试 pacman -Syyy 检查硬盘lsblk 建立分区cfdisk &#x2F;dev&#x2F;sda 选择New 回车，然后选择Write 回车 输入 yes 回车写入完成 选择Quit 回车退出 格式化将刚刚分好的区格式化为ext4格式，这里认准分区号sda1 mkfs.ext4 &#x2F;dev&#x2F;sda1 挂载分区sda1 mount &#x2F;dev&#x2F;sda1 &#x2F;mnt 安装系统pacstrap &#x2F;mnt base linux linux-firmware nano 生成fstab文件genfstab -U &#x2F;mnt &gt;&gt; &#x2F;mnt&#x2F;etc&#x2F;fstab 检查生成的fstab文件 cat &#x2F;mnt&#x2F;etc&#x2F;fstab 配置新系统切换到装好的系统arch-chroot &#x2F;mnt 设置时区ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime 设置localenano &#x2F;etc&#x2F;locale.gen Ctrl+W 输入 #en_US 回车 找到UTF-8那一行 删掉前面的# Ctrl+W 输入 #zh_CN 回车 找到UTF-8那一行 删掉前面的#Ctrl+X 然后Y保存退出生成locale locale-gen 创建并写入/etc/locale.conf文件 nano &#x2F;etc&#x2F;locale.conf 填入内容，注意这里只能填这个 LANG&#x3D;en_US.UTF-8 创建并写入hostnamenano &#x2F;etc&#x2F;hostname 我这里名字叫WinArch保存退出 修改hostsnano &#x2F;etc&#x2F;hosts 写入内容如图（中间的空白用tab而非空格），arch替换为你之前在hostname里写入的内容，其他都按照图里面的写（注意最后一行的ip是127.0.1.1） 保存退出 建议上述编辑的内容都用cat输出检查一下 root用户创建密码passwd 然后输入并确认密码 装启动器和一些软件包含了一些常用到的软件 pacman -S grub efibootmgr networkmanager network-manager-applet dialog wireless_tools wpa_supplicant os-prober mtools dosfstools ntfs-3g base-devel linux-headers reflector git sudo intel的cpu，需要安装intel的微码文件 pacman -S intel-ucode 完成之后输入 grub-install &#x2F;dev&#x2F;sda 注意是硬盘位置不是分区位置，硬盘上也只有刚刚安装的Arch系统 生成grub.cfg grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg 出现吧啦吧啦done就完成了 退出新系统重启exit reboot 不装桌面环境的话，到这步即可使用了，后续需要什么再装不迟 新建用户并授权useradd -m -G wheel winotmk 我的用户是winotkm，这里主要是创建一个非root的账户，桌面环境一般无法用root登陆的创建密码 passwd winotmk 授权 EDITOR&#x3D;nano visudo Ctrl+W 输入 # %wheel 回车 找到这行 删除前面的 #（取消注释） 安装Display Server和Display Managerpacman -S xorg 然后我喜欢KDE桌面，所以装： pacman -S sddm 设置开机启动 systemctl enable sddm PS.取消开机启动是 systemctl disable sddm 安装Desktop EnvironmentKDE： pacman -S plasma kde-applications packagekit-qt5 安装中文的字体 pacman -S noto-fonts-cjk 好了，大功告成 reboot","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"}]},{"title":"ArchLinux命令集","slug":"ArchLinux命令","date":"2021-10-23T17:06:40.746Z","updated":"2021-10-23T17:06:40.746Z","comments":true,"path":"2021/10/24/ArchLinux命令/","link":"","permalink":"https://winotmk.github.io/2021/10/24/ArchLinux%E5%91%BD%E4%BB%A4/","excerpt":"刚装完archlinux后ifconfig无法使用? pacman -S net-tools dnsutils inetutils iproute2 Archlinux开启ssh服务命令：systemctl enable sshd.service 开机启动 systemctl start sshd.service 立即启动 systemctl restart sshd.service 立即重启 关于systemctl:https://wiki.archlinux.org/title/Systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87) 比如：关闭开机启用KDE桌面环境 # systemctl disable sddm 切换到root用户：su","text":"刚装完archlinux后ifconfig无法使用? pacman -S net-tools dnsutils inetutils iproute2 Archlinux开启ssh服务命令：systemctl enable sshd.service 开机启动 systemctl start sshd.service 立即启动 systemctl restart sshd.service 立即重启 关于systemctl:https://wiki.archlinux.org/title/Systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87) 比如：关闭开机启用KDE桌面环境 # systemctl disable sddm 切换到root用户：su 以下无用，应该是旧版本PuTTY密钥算法支持有限，请更新PuTTY。。 用PuTTY登录报错： couldn’t agree a host key algorithm 解决，生成密钥：（出处：https://forums.centos.org/viewtopic.php?t=52892 cd &#x2F;etc&#x2F;ssh ssh-keygen -t dsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_dsa_key vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config Uncomment this line: HostKey &#x2F;etc&#x2F;ssh&#x2F;ssh_host_dsa_key chgrp ssh_keys ssh_host_dsa_key service sshd restart 如果putty连接报Network error:connection refused关闭防火墙 # systemctl start iptables 安装jre环境pacman -S jre8-openjdk 查看java状态 java -version ###启动一个mc服务器https://cloud.tencent.com/developer/article/1622545 java -Xms1024MB -Xmx2048MB -jar iserver.jar 关于linux任务前后台处理：https://blog.csdn.net/timonium/article/details/116245621https://www.cnblogs.com/xiaoleiel/p/8349675.html正在前台运行的命令暂停且放到后台： Ctrl+z jobs ## 查看后台进程编号 jobs -l ##查看进程PID，可以配合kill干掉进程 bg在后台继续执行，fg调回前台执行 bg [作业编号] fg [作业编号]","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"}]},{"title":"树莓派上架设TimeMachine服务","slug":"树莓派TimeMachine","date":"2021-10-13T16:14:56.708Z","updated":"2021-10-13T16:14:56.708Z","comments":true,"path":"2021/10/14/树莓派TimeMachine/","link":"","permalink":"https://winotmk.github.io/2021/10/14/%E6%A0%91%E8%8E%93%E6%B4%BETimeMachine/","excerpt":"命令前半参考：从此Mac上的文件再也不会丟了 后半参考：如何自己搭建一个Time Machine服务器 挂载硬盘目录 sudo mount &#x2F;dev&#x2F;sda2 &#x2F;mnt&#x2F;WinSource 1.安装netatalk和avahi（自己感觉avahi不装也行 sudo apt install netatalk avahi-daemon -y 2.创建账户wintm来访问TimeMachine，至少别用root，root访问不能！ useradd -c &quot;Time machine&quot; -m -s &#x2F;bin&#x2F;bash wintm 然后设置密码 sudo passwd wintm","text":"命令前半参考：从此Mac上的文件再也不会丟了 后半参考：如何自己搭建一个Time Machine服务器 挂载硬盘目录 sudo mount &#x2F;dev&#x2F;sda2 &#x2F;mnt&#x2F;WinSource 1.安装netatalk和avahi（自己感觉avahi不装也行 sudo apt install netatalk avahi-daemon -y 2.创建账户wintm来访问TimeMachine，至少别用root，root访问不能！ useradd -c &quot;Time machine&quot; -m -s &#x2F;bin&#x2F;bash wintm 然后设置密码 sudo passwd wintm 3.配置netatalk sudo nano &#x2F;etc&#x2F;netatalk&#x2F;AppleVolumes.default 这个文件似乎一行代表一个服务可以在 # The line below sets some DEFAULT, starting with Netatalk 2.1. :DEFAULT: options:upriv,usedots # By default all users have access to their home directories. ~&#x2F; &quot;Home Directory&quot; 下面加上一行 &#x2F;mnt&#x2F;WinSource&#x2F;TimeMachine WinMachine allow:wintm options:tm #挂在硬盘里的文件夹 afp服务名 允许wintm用户登陆 开启timemachine 4.重启服务 sudo service netatalk restart sudo service avahi-daemon restart 一些坑 试图直接使用root账户连接，在这里卡了很久，还尝试在AppleVolumes.default设置里写上例如 /mnt/WinSource/TimeMachine WinMachine allow:root rwlist:root options:tm 翻到这篇：[NAS之旅]-基于Centos7搭建Netatalk为Windows增加AFP协议 才忽然醒悟，root用户是禁止登录AFP服务的，得嘞，新开个专门的用户吧 提到了新建一个用户来跑timemachine：如何自己搭建一个Time Machine服务器 一开始习惯将硬盘挂载到/root/WinSource，然鹅这似乎导致即便mac上TimeMachine连接上了也报错没法开始备份，想想也是wintm用户没有权限进root。。总结为避免不必要的麻烦以后硬盘不挂/root里，这里我挂进了/mnt ps:当时还试图对/root/WinSource使用chown sudo chown -R wintm:wintm &#x2F;root&#x2F;WinSource 见这篇：用树莓派实现 Time Capsule 无解，chown改不了WinSource目录的所有者，root强而有力，认输 补充连接NetaTalk官方文档和下载：http://netatalk.sourceforge.net/3.1/htmldocs/afp.conf.5.html AFP Netatalk 分享配置 (又名 Apple Time Machine). 使用netatalk打造一款属于自己的Time-Machine在线备份服务器","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"},{"name":"rashbeerypi","slug":"rashbeerypi","permalink":"https://winotmk.github.io/tags/rashbeerypi/"}]},{"title":"hexo+github","slug":"hexo+github","date":"2021-10-13T06:19:53.663Z","updated":"2021-10-13T06:19:53.663Z","comments":true,"path":"2021/10/13/hexo+github/","link":"","permalink":"https://winotmk.github.io/2021/10/13/hexo+github/","excerpt":"https://winotmk.github.io/ github：https://github.com/winotmk/winotmk.github.io 总有一些零碎的想法，需要记录下来，写全面的文章没有时间，不写下来又会忘，日记app又不方便整理，同时也想利用一下树莓派，网上搜索便发现hexo+github部署的方式，于是想尝试尝试，一路遇到很多问题 主要参考：基于树莓派搭建Hexo博客部署到GitHub/Gitee 前期第二参考：hexo——轻量、简易、高逼格的博客 更详细的安装过程：GitHub+Hexo 搭建个人网站详细教程 hexo官方文档：https://hexo.io/docs/ hexo博客文档（似乎和上面有不少内容重叠）：https://theme-next.js.org/docs/ 安装hexo下载armv7版本的node.js：nodejs下载","text":"https://winotmk.github.io/ github：https://github.com/winotmk/winotmk.github.io 总有一些零碎的想法，需要记录下来，写全面的文章没有时间，不写下来又会忘，日记app又不方便整理，同时也想利用一下树莓派，网上搜索便发现hexo+github部署的方式，于是想尝试尝试，一路遇到很多问题 主要参考：基于树莓派搭建Hexo博客部署到GitHub/Gitee 前期第二参考：hexo——轻量、简易、高逼格的博客 更详细的安装过程：GitHub+Hexo 搭建个人网站详细教程 hexo官方文档：https://hexo.io/docs/ hexo博客文档（似乎和上面有不少内容重叠）：https://theme-next.js.org/docs/ 安装hexo下载armv7版本的node.js：nodejs下载 配置githubgit key配置：github每次需要输入密码和用户名的问题… 取消使用key令牌后还要输入密码：取消 SSH 私钥密码 后期配置hexo配置官方文档：https://hexo.io/zh-cn/docs/configuration 主题Next主题github：https://github.com/next-theme/hexo-theme-next Next主题的文档(ps.页面样式好看可参考)：第三方服务集成 Next主题代码框高亮预览设置：https://theme-next.js.org/highlight/ 资产文件夹https://hexo.io/docs/asset-folders 访客统计DevOps 访客数统计 &amp; google analytics 数据分析 将文章视图添加到您的 Hexo 博客(有LeanCloud和Firebase比较分析） 给hexo博客文章添加阅读次数统计 hexo next主题的leancloud安全插件github：https://github.com/theme-nex… 上面链接的说明：Leancloud访客统计插件重大安全漏洞修复指南 Firebase:https://console.firebase.google… 评论畅言：https://changyan.kuaizhan.com/v3/changyan/overviewvaline：https://valine.js.org 其他配置vscode：本来都是用putty打指令，用WinSCP访问我的目录操作的，但是WinSCP自带的文本编辑过与拉跨，有几次多打空格没看出来导致直接hexo g失败，后来突发奇想为啥不找个轻量级的IDE直接去写这些呢，于是用起了vscode Vscode配置ftp连接远程服务器（上传本地文件） 不过自己测试发现不好用，于是用了SSH FS这个vscode插件 相对路径./与../区别","categories":[],"tags":[]},{"title":"linux文件和目录权限","slug":"Linux权限","date":"2021-10-13T03:52:57.175Z","updated":"2021-10-13T03:52:57.175Z","comments":true,"path":"2021/10/13/Linux权限/","link":"","permalink":"https://winotmk.github.io/2021/10/13/Linux%E6%9D%83%E9%99%90/","excerpt":"*本文摘录整理为主 用ls -l查看权限： 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwx--x--x 1 root wheel 6872 2 7 22:41 compressedPackage&#x2F; drwxr-xr-x 1 liuml wheel 8620 2 15 09:32 wwwroot&#x2F; lrwxrwxrwx 1 liuml wheel 46 2 24 19:30 abc@ -&gt; home&#x2F;abc -rwxr-xr-x 1 liuml wheel 68568 2 29 07:43 test* - 文件名栏位 文件后面的符号含义 - &#x2F; ：表明是一个目录 - @ ：表明是到其它文件的符号链接 - * ：表明是一个可执行文件。 - 对于权限设置的解释 - r 是读，w 是写，x 是执行 - 对应数字如下: - r &#x3D; 4 w &#x3D; 2 x &#x3D; 1 - rwx ：4+2+1 &#x3D; 7 - rw- ：4+2 &#x3D; 6 - r-x ：4+1 &#x3D; 5 - drwxr-xr-x ：755 - 第 0-1位 文件类型 - “-” ：表示普通文件； - “d” ：表示目录； - “l” ：表示链接文件； - “p” ：表示管理文件； - “b” ：表示块设备文件； - “c” ：表示字符设备文件； - “s” ：表示套接字文件； - 第 2-4位 文件所有者权限 [User] - 第 5-7位 文件所有者所在组权限 [Group] - 第 8-10位 其他用户权限 [Others] - 没有的权限用 “-” 来表示 ———————————————— 版权声明：本文为CSDN博主「烟雨弥漫了江南」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;u010324331&#x2F;article&#x2F;details&#x2F;88035175&#x2F;","text":"*本文摘录整理为主 用ls -l查看权限： 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwx--x--x 1 root wheel 6872 2 7 22:41 compressedPackage&#x2F; drwxr-xr-x 1 liuml wheel 8620 2 15 09:32 wwwroot&#x2F; lrwxrwxrwx 1 liuml wheel 46 2 24 19:30 abc@ -&gt; home&#x2F;abc -rwxr-xr-x 1 liuml wheel 68568 2 29 07:43 test* - 文件名栏位 文件后面的符号含义 - &#x2F; ：表明是一个目录 - @ ：表明是到其它文件的符号链接 - * ：表明是一个可执行文件。 - 对于权限设置的解释 - r 是读，w 是写，x 是执行 - 对应数字如下: - r &#x3D; 4 w &#x3D; 2 x &#x3D; 1 - rwx ：4+2+1 &#x3D; 7 - rw- ：4+2 &#x3D; 6 - r-x ：4+1 &#x3D; 5 - drwxr-xr-x ：755 - 第 0-1位 文件类型 - “-” ：表示普通文件； - “d” ：表示目录； - “l” ：表示链接文件； - “p” ：表示管理文件； - “b” ：表示块设备文件； - “c” ：表示字符设备文件； - “s” ：表示套接字文件； - 第 2-4位 文件所有者权限 [User] - 第 5-7位 文件所有者所在组权限 [Group] - 第 8-10位 其他用户权限 [Others] - 没有的权限用 “-” 来表示 ———————————————— 版权声明：本文为CSDN博主「烟雨弥漫了江南」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;u010324331&#x2F;article&#x2F;details&#x2F;88035175&#x2F; 图片来源：https://blog.csdn.net/zhuoya_/article/details/77418413 共显示了七列信息，从左至右依次为：权限、文件数、归属用户、归属群组、文件大小、创建日期、文件名称d ：第一位表示文件类型 第一位字符 文件类型 d 文件夹 - 普通文件 l 链接 b 块设备文件 p 管道文件 c 字符设备文件 s 套接口文件 rxw和数值权限的对应： rxw 数值 r(读) 4 w(写) 2 x(执行) 1 所以，例如：rwx rw- r–7 6 4三个一组,rwx权限分别对应421相加得7,rw-对应42相加,r–对应4 图片来源：http://man.linuxde.net/chmod 举例：-rw-r–r–，即为644权限6对应4+2 rw-4对应 r–那么这个文件的权限就是所有者rw-,所属组r–,其他人r– 常用的linux权限对应： 数值 rxw 444 r–r–r– 600 rw——- 644 rw-r–r– 666 rw-rw-rw- 700 rwx—— 744 rwxr–r– 755 rwxr-xr-x 777 rwxrwxrwx 命令修改权限 权限管理命令chmod 修改文件或者目录的权限全拼: change permissions mode of a file语法: chmod [&#123;ugoa&#125;&#123;+-&#x3D;&#125;&#123;rwx&#125;] [文件或目录] [mode&#x3D;421] [文件或目录] -R 递归修改 u:所有者, g:所属组,o:其他人,a:所有; +:添加权限,-减少权限,&#x3D;直接赋值成这个权限 创建目录mkdir时加权限 $ mkdir -m&#x3D;r-- letter 上面的命令会创建一个名为 letter 的目录，同时为目录所有者、用户组和其他用户 针对该目录赋予只读权限 mkdir命令小参考：在 Linux 下用 mkdir 命令来创建目录和子目录 参考：linux权限drwxrwxrwx所代表的意义 linux ls -l命令显示详解 linux更改文件(夹)权限或所有者 Linux 文件权限查看及修改","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"}]},{"title":"MayaMASH动力学做链子","slug":"Maya_MASH","date":"2021-10-13T03:52:45.255Z","updated":"2021-10-13T03:52:45.255Z","comments":true,"path":"2021/10/13/Maya_MASH/","link":"","permalink":"https://winotmk.github.io/2021/10/13/Maya_MASH/","excerpt":"","text":"","categories":[],"tags":[{"name":"Testing","slug":"Testing","permalink":"https://winotmk.github.io/tags/Testing/"},{"name":"Another Tag","slug":"Another-Tag","permalink":"https://winotmk.github.io/tags/Another-Tag/"}]}],"categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"},{"name":"rashbeerypi","slug":"rashbeerypi","permalink":"https://winotmk.github.io/tags/rashbeerypi/"},{"name":"Testing","slug":"Testing","permalink":"https://winotmk.github.io/tags/Testing/"},{"name":"Another Tag","slug":"Another-Tag","permalink":"https://winotmk.github.io/tags/Another-Tag/"}]}