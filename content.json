{"meta":{"title":"WinNote","subtitle":"","description":"零碎MD文档收集 | 生命在于折腾","author":"winotmk","url":"https://winotmk.github.io","root":"/"},"pages":[{"title":"分类","date":"2021-11-01T08:17:29.000Z","updated":"2021-11-01T08:19:23.038Z","comments":false,"path":"categories/index.html","permalink":"https://winotmk.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-11-01T08:21:06.000Z","updated":"2021-11-01T08:21:34.027Z","comments":false,"path":"tags/index.html","permalink":"https://winotmk.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"在云上容器内运行minecraft服务器","slug":"在云上容器内运行minecraft服务器","date":"2023-08-26T00:00:00.000Z","updated":"2023-08-25T10:26:25.122Z","comments":true,"path":"在云上容器内运行minecraft服务器/","link":"","permalink":"https://winotmk.github.io/%E5%9C%A8%E4%BA%91%E4%B8%8A%E5%AE%B9%E5%99%A8%E5%86%85%E8%BF%90%E8%A1%8Cminecraft%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"最近在研究docker以及阿里云eci容器服务，正想着拿什么服务在上面跑的时候，想起了之前的一篇文章：https://winotmk.github.io/MC/这里所提到的minecraft服务器，本是我的一个基友服，在我一台改造过的旧笔记本上运行（笔记本拆了屏幕，新做了外壳，跑Arch系统）忽然突发奇想，能不能把MC的数据和运行环境（主要是jre）分离，数据部分永久存储在阿里云NAS上，运行环境则在容器里运行呢？这样的好处是：文件存储NAS里可以长久存放，不用担心本地硬盘挂掉也不用怎么维护，数据大概也就几百M，价格抹零以后成本一年可能就几块钱可以忽略不计了服务器想什么时候启就什么时候启，玩得人多随时升级配置","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://winotmk.github.io/tags/hexo/"},{"name":"next","slug":"next","permalink":"https://winotmk.github.io/tags/next/"},{"name":"阿里云","slug":"阿里云","permalink":"https://winotmk.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"eci","slug":"eci","permalink":"https://winotmk.github.io/tags/eci/"},{"name":"docker","slug":"docker","permalink":"https://winotmk.github.io/tags/docker/"}]},{"title":"eci价格计算表","slug":"eci价格计算表","date":"2023-08-25T00:00:00.000Z","updated":"2023-08-25T10:26:24.647Z","comments":true,"path":"eci价格计算表/","link":"","permalink":"https://winotmk.github.io/eci%E4%BB%B7%E6%A0%BC%E8%AE%A1%E7%AE%97%E8%A1%A8/","excerpt":"","text":"计费文档：https://help.aliyun.com/document_detail/447697.html 定价标准： vCPU单价（vCPU）：0.000049 元/秒内存单价（GiB）： 0.00000613 元/秒 所以可知： 规格 秒 分钟 小时 天 月 年 每1u 0.00004900 0.00294 0.1764 4.2336 127.008 1545.264 每1G内存 0.00000613 0.0003678 0.022068 0.529632 15.88896 193.31568 eci价格计算： 实例规格 秒 分钟 小时 天 月 年 0.25u 0.5G 0.00001532 0.0009189 0.055134 1.323216 39.69648 482.97384 0.5u 1G 0.00003063 0.0018378 0.110268 2.646432 79.39296 965.94768 2u 4G 0.00012252 0.0073512 0.441072 10.585728 317.57184 3863.79072 2u 8G 0.00014704 0.0088224 0.529344 12.704256 381.12768 4637.05344 4u 8G 0.00024504 0.0147024 0.882144 21.171456 635.14368 7727.58144 64u 256G 0.00470528 0.2823168 16.939008 406.536192 12196.08576 148385.7101 一秒0.0047元很便宜吗？一月要1.2w！可以说被安排得明明白白了","categories":[],"tags":[{"name":"阿里云","slug":"阿里云","permalink":"https://winotmk.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"eci","slug":"eci","permalink":"https://winotmk.github.io/tags/eci/"}]},{"title":"阿里云eci容器创建模板和eci命令行管理工具使用","slug":"阿里云eci容器创建模板和eci命令行管理工具使用","date":"2023-08-25T00:00:00.000Z","updated":"2023-08-27T15:38:18.478Z","comments":true,"path":"阿里云eci容器创建模板和eci命令行管理工具使用/","link":"","permalink":"https://winotmk.github.io/%E9%98%BF%E9%87%8C%E4%BA%91eci%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E6%A8%A1%E6%9D%BF%E5%92%8Ceci%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/","excerpt":"","text":"参考文章这两篇足够:https://github.com/aliyuneci/eci-client-doc/blob/main/eci_run.mdhttps://help.aliyun.com/document_detail/186961.html eci简介https://www.aliyun.com/product/eciECI是 Serverless 和容器化的弹性计算服务。您无需管理底层 ECS 服务器，只需要提供打包好的镜像，即可运行容器，与阿里云容器服务无缝对接并仅为容器实际运行消耗的资源付费。 博主：比ECS云服务器灵活得多，本地用docker制作好镜像以后，上传，随启随用，用完就释放，成本可以很低 用模板创建eci","categories":[],"tags":[{"name":"阿里云","slug":"阿里云","permalink":"https://winotmk.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"eci","slug":"eci","permalink":"https://winotmk.github.io/tags/eci/"},{"name":"docker","slug":"docker","permalink":"https://winotmk.github.io/tags/docker/"}]},{"title":"制作docker的node镜像跑hexo并且用阿里云容器服务运行","slug":"制作docker的node镜像跑hexo并且用阿里云容器服务运行","date":"2023-08-05T00:00:00.000Z","updated":"2023-08-25T10:26:25.553Z","comments":true,"path":"制作docker的node镜像跑hexo并且用阿里云容器服务运行/","link":"","permalink":"https://winotmk.github.io/%E5%88%B6%E4%BD%9Cdocker%E7%9A%84node%E9%95%9C%E5%83%8F%E8%B7%91hexo%E5%B9%B6%E4%B8%94%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E8%BF%90%E8%A1%8C/","excerpt":"","text":"一口气步子迈得有大，慢慢记录一下本博客是由树莓派上的hexo生成的，最近在捣鼓docker，一时想不起来有什么灵活小巧的服务拿来用docker玩，那么想着干脆把树莓派上hexo这部分服务做成镜像，需要用的时候拿出来用用想必是极好的（这么一来好像树莓派又要吃会了）恰巧最近又在琢磨阿里云ECI容器服务，所以理论上是可以用我自己打包好的镜像的，大致流程如下图： docker 基本操作博主吐槽一下，总觉得一些类似run，commit操作完全可以做成一个美观好用的UI控制软件，但是docker destop就是不好用，然后大家都默认敲命令行是方便的，好用的。十分不解，可能需要ui的不会写ui，熟练使用命令行的也不需要什么ui吧，诶 https://chunchengwei.github.io/ruan-jian/ji-yu-docker-de-hexo-bo-ke-da-jian/ 这个基本操作写得还行下次爬一篇下来吧： https://yingclin.github.io/2018/docker-basic.html 1.运行容器1docker run -it -d --name [container-name] -p 8088:80 [image-name] 这里是将容器内的80端口映射到宿主机的8088端口 参数说明 -d 表示后台运行容器-t 为docker分配一个伪终端并绑定到容器的标准输入上-i 是让容器的标准输入保持打开状态-p 指定映射端口 还能这么写： 123docker run --name mssql -e &#x27;ACCEPT_EULA=Y&#x27; -e &#x27;SA_PASSWORD=xxxx&#x27; \\ -p 1433:1433 \\ -d mssql-2019-with-cimb \\应该是可以换行表述-e 定义环境变量（通常制作镜像的时候应该已经写好了，或者在容器内做好自动脚本，run时候再写毕竟是不方便的） 2.将此容器 commit 保存为新镜像：格式： 1docker commit container-id new-name container-id也可以是已有容器的名字，例如： 1docker commit node-test nodehexo nodehexo这里是新镜像名 3.启动docker引擎时自动运行docker容器：https://blog.csdn.net/londa/article/details/97611947 ps:上面链接文章还有:修改docker容器的挂载路径，修改docker默认的存储位置 1docker run --restart=always 有时候，我们创建容器时忘了添加参数 --restart=always ，当 Docker 重启时，容器未能自动启动， 现在要添加该参数怎么办呢，方法有二： 1、Docker 命令修改 1docker container update --restart=always 容器名字 我实际运行时，可以支持同时配置多个容器id，比如（其中container关键字可以忽略不写） 1docker update 87cd61ad7f7c f488b0479f24 2109903220ce 1fb346ea1a46 --restart=no 2、直接改配置文件 首先停止容器，不然无法修改配置文件 配置文件路径为：/var/lib/docker/containers/ 容器ID 在该目录下找到一个文件 hostconfig.json ，找到该文件中关键字 RestartPolicy 修改前配置：&quot;RestartPolicy&quot;:&#123;&quot;Name&quot;:&quot;no&quot;,&quot;MaximumRetryCount&quot;:0&#125; 修改后配置：&quot;RestartPolicy&quot;:&#123;&quot;Name&quot;:&quot;always&quot;,&quot;MaximumRetryCount&quot;:0&#125; 最后启动容器。 4.有关dockerfiledockerfile是构建镜像时的规则主要参考这两篇：https://www.runoob.com/docker/docker-dockerfile.htmlhttps://developer.aliyun.com/article/484262https://juejin.cn/s/docker%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E6%97%B6%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC 编写dockerfile我的第一个dockerfile：简单做个测试，在之前做的镜像上加了条启动命令Dockerfile （文件没有后缀) 1234## Set the base image to CentOS 基于nodehexoFROM nodehexo:V4COPY ddnsstart.sh /ddnsstart.shENTRYPOINT [&quot;/bin/bash&quot;, &quot;/ddnsstart.sh&quot;] 很简单:FROM基于nodehexo:V4镜像构建COPY就是拷贝构建目录下的ddnsstart.sh到之后构建好的镜像根目录下ENTRYPOINT会在用新镜像开启容器时再执行，这里会在执行/bin/bash里执行/ddnsstart.sh 一个dockerfile只能有一条ENTRYPOINT，多个也只执行最后一个,CMD也是如此如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。 关于CMD还有些写法，比如还可以CMD service ssh start &amp;&amp; service XXX start &amp;&amp; tail -f /etc/passwd一起执行多道指令这在构建镜像的时候会被自动转换为类似：CMD [&quot;/bin/sh&quot;, &quot;service ssh start&quot;,&quot;service XXX start&quot;,&quot;tail -f /etc/passwd&quot;] tail -f /etc/passwd作用在于防止docker容器开启后立即关闭见下面段落 CMD格式： 123CMD &lt;shell 命令&gt; CMD [&quot;&lt;可执行文件或命令&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...] CMD [&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...] # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数 推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认是 bin/sh ddnsstart.sh文件 12345#!/bin/bashroot/ddnsAPP/ddns -c root/ddnsAPP/config.jsonecho &quot;更新mcwrite.winotmk.com解析&quot;service ssh starttail -f /etc/passwd 这里都是简单的shell命令了root/ddnsAPP/ddns -c root/ddnsAPP/config.json是执行ddns更新，解析新的ip到域名上，因为我这个镜像打算放到阿里云ECI里跑，每次新拉的IP当然都不一样（一直占着一个IP会产生费用，没必要） 同时我还执行了启动ssh服务，有的时候会用上ssh，因为我把网盘挂载到了容器内tail -f /etc/passwd这里起到的比较重要的占着进程的作用，详见下面： *关于 CMD 或 entrypoint 构建后 docker run -dit 为何容器依然秒退https://www.zhihu.com/question/344939968是因为使用了CMD或者entrypoint去service *** start命令作为容器启动命令，主进程执行完结束了，容器也就结束了 dockerfile 写清楚 entrypoint 和 cmd，启动脚本如果立刻会退出，那么在最后添加 tail -f 某个日志文件。或者 监听某个端口或者进程。方法1: 设置容器启动时就启动服务ENTRYPOINT [“flask”, “run”, “-h”, “0.0.0.0”, “-p”, “80”]方法2:CMD service apache2 start &amp;&amp; tail -F /var/log/apache2/error.log再极端点 sleep infinite 用dockerfile构建镜像docker build -t &lt;新镜像名字:标签&gt; .比如docker build -t nodehexo:V5 .请不要忘记最后一个.，这表示在当前目录下构建用这条指令前先CD到dockerfile文件所放置的目录比如我先CD ./dockerbuild，因为我的文件放在用户/dockerbuild目录下面然后就拥有了属于构建的镜像！ 5.将已有镜像打包带走/使用将打包来的镜像https://zhuanlan.zhihu.com/p/348849578 将镜像保存为本地文件可以使用Docker save命令 1docker save -o mssql-2019-with-cimb.tar mssql-2019-with-cimb 会得到一个mssql-2019-with-cimb.tar文件，就可以随身携带啦 从文件载入镜像 从文件载入镜像使用Docker load命令: 1docker load --input mssql-2019-with-cimb.tar 6.其他一些操作12345678910111213141516171819202122232425# ****************************** 容器 ****************************** ## 查看正在运行的容器$ docker ps# 查看所有容器$ docker ps -a# 启动/停止某个容器$ docker start/stop id/name# 以交互方式启动一个容器$ docker start -i id/name# 进入某个容器(使用exit退出后容器也跟着停止运行)$ docker attach id/name# 启动一个伪终端以交互式的方式进入某个运行的容器（使用exit退出后容器不停止运行）$ docker exec -it id/name# 删除某个容器$ docker rm id/name# 复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash$ docker run --name test -ti ubuntu /bin/bash# ****************************** 镜像 ****************************** ## 查看本地镜像$ docker images# 删除某个镜像$ docker rmi id/name# 基于当前目录下的Dockerfile，创建一个名为name:flag的镜像$ docker build -t name:flag . win10下docker给已存在的容器添加端口映射的方法博主再吐槽一下，这个调试阶段如此常用的修改容我端口，改起来却像游戏作弊，不觉得这个要做简单很难，怕只是没做https://mdnice.com/writing/25822ca29531424d9b68d7feb8273a82https://blog.csdn.net/Taysuesue/article/details/126706394https://www.cnblogs.com/kingsonfu/p/11578073.html 查看容器已映射的端口（dockerdeskUI内也可看见） 1docker port 容器ID/容器名 先停止容器 1docker stop &#123;容器的名称或者 id &#125; 查看容器完整的 hash_of_the_container 数值： 123456docker inspect &#123;容器的名称或者 id &#125; | grep Id# 比如：docker inspect cbe26510c276 | grep Id# 会得到如下结果：# &quot;Id&quot;: &quot;cbe26510c276fa9a4487a8c2af8cbb49410f2a5305149d2b26eb8ce37c777d00&quot; 如果主机是linux（mac应该也行没测）打开 hostconfig.json 配置文件: 1vim /var/lib/docker/containers/&#123;hash_of_the_container&#125;/hostconfig.json 记得还要改 config.v2.json，改法同下面的win10如果是win101.先找到容器的配置文件，首先我的电脑地址栏输\\wsl$\\进入到网络文件夹上,在一步一步找到容器目录 1\\\\wsl$\\docker-desktop-data\\data\\docker\\containers 2.点击进入相应容器ID文件夹，打开后修改其中的 config.v2.json 和 hostconfig.json hostconfig.json 1&quot;PortBindings&quot;:&#123;&quot;22/tcp&quot;:[&#123;&quot;HostIp&quot;:&quot;&quot;,&quot;HostPort&quot;:&quot;50022&quot;&#125;],&quot;3306/tcp&quot;:[&#123;&quot;HostIp&quot;:&quot;&quot;,&quot;HostPort&quot;:&quot;53306&quot;&#125;],&quot;6379/tcp&quot;:[&#123;&quot;HostIp&quot;:&quot;&quot;,&quot;HostPort&quot;:&quot;56379&quot;&#125;]&#125; 这里的HostPort字面意思就是宿主机的端口，所以即：容器内22&gt;外部5022访问容器内3306&gt;外部53306访问容器内6379&gt;外部56379访问 config.v2.json 有两处需要添加，只修改一处不生效 1&quot;ExposedPorts&quot;:&#123;&quot;22/tcp&quot;:&#123;&#125;,&quot;3306/tcp&quot;:&#123;&#125;,&quot;6379/tcp&quot;:&#123;&#125;&#125; 1&quot;Ports&quot;:&#123;&quot;22/tcp&quot;:[&#123;&quot;HostIp&quot;:&quot;0.0.0.0&quot;,&quot;HostPort&quot;:&quot;50022&quot;&#125;],&quot;3306/tcp&quot;:[&#123;&quot;HostIp&quot;:&quot;0.0.0.0&quot;,&quot;HostPort&quot;:&quot;53306&quot;&#125;],&quot;6379/tcp&quot;:[&#123;&quot;HostIp&quot;:&quot;0.0.0.0&quot;,&quot;HostPort&quot;:&quot;56379&quot;&#125;]&#125; 不过我实际只改了这里的&quot;ExposedPorts&quot;貌似就行了 然后重启docker，注意不只是重启容器，我一开始只重启容器发现白改了 12# 重启 dockerservice docker restart 或者在系统右下角，点击Restart重启整个 Docker 服务，然后再重启 Container 即可正常使用 docker容器内服务开机自启动实现方案（以ssh服务为例）https://blog.csdn.net/qq_38603541/article/details/124028994因为我后续打算用类似vscode里的remote-ssh来管理容器内，也想用winscp等好用的工具可以接进来，还是有必要开个ssh 解决方案1、正常我们在linux操作系统内设置服务自启动的方法一般都是使用systemctl。 systemctl enable ssh2、但是，一般在docker容器内我们一般不这么干，因为容器内没有systemctl权限…… 3、我们依然还是使用脚本的形式将ssh设为自启，只不过这个的这个脚本和我们使用Dockerfile的脚本不一样。 4、在 /root 目录下新建一个 start_ssh.sh文件，并给予该文件可执行权限。 12345touch /root/start_ssh.sh vim /root/start_ssh.sh chmod +x /root/start_ssh.sh 5、start_ssh.sh 脚本的内容，如下： 123456#!/bin/bash LOGTIME=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)echo &quot;[$LOGTIME] startup run...&quot; &gt;&gt;/root/start_ssh.logservice ssh start &gt;&gt;/root/start_ssh.log#service mysql start &gt;&gt;/root/star_mysql.log //其他服务也可这么实现 6、将start_ssh.sh脚本添加到启动文件中 1vim /root/.bashrc 7、在 .bashrc 文件末尾加入如下内容： 1234# startup runif [ -f /root/start_ssh.sh ]; then . /root/start_ssh.shfi 博主ps：.和/中间要加空格不然似乎会找不到文件也就不会自动启动服务了 8、保存后，等下次重启容器的时候，添加的服务也就跟着重启了。 拓展docker容器在启动的时候，会自动执行的是~/.bashrc文件，所以，环境变量需要配置在该文件内，这样镜像启动时，可自动执行该文件，使环境变量生效。 设置docker容器开机自启动 1docker update --restart=always 容器名 用ssh连接 docker 容器https://blog.csdn.net/weixin_34910922/article/details/125193597 1.修改root密码 12$ passwd root输入密码：123456(自己决定) 2.安装Openssh 123sudo apt-get update # 更新源sudo apt-get upgrade # 更新系统软件apt-get install -y openssh-server 3.修改ssh配置,允许root登录https://blog.csdn.net/weixin_43343144/article/details/102494830【非常重要】在/etc/ssh/ssh_config中没有PermitRootLogin yes选项的话，就要在sshd_config文件中寻找！ 123vim /etc/ssh/sshd_configPermitRootLogin yes #root登陆权限PasswordAuthentication yes #密码权限 4.启动ssh服务/重启服务 12service ssh startservice ssh restart 安装hexo 1npm install hexo-cli -g 将自己的镜像上传至阿里云阿里云提供容器镜像服务，我自己玩开通个人实例即可https://cr.console.aliyun.com/cn-shanghai/instances 建立一个自己的仓库，然后就能看到示例说明，我们就能把自己的镜像上传了将镜像推送到Registry 123$ docker login --username=5503*****@qq.com registry.cn-shanghai.aliyuncs.com$ docker tag [ImageId] registry.cn-shanghai.aliyuncs.com/winotmk/wincool:[镜像版本号]$ docker push registry.cn-shanghai.aliyuncs.com/winotmk/wincool:[镜像版本号] tag是重命名镜像，push是上传（不知道为什么要重命名 在阿里云上使用容器实例（ECI）运行镜像阿里云ECI提供这个服务，你可以直接用现有的镜像也可以自己上传（就是上一步镜像服务里上传的镜像）按秒收费！不过作为hexo这种启用&gt;生成&gt;部署&gt;关闭的服务来说，花不了几毛钱https://www.aliyun.com/product/ecs/eci?spm=5176.28055625.J_3207526240.112.75d4154a4eCcir&amp;scm=20140722.M_4695495._.V_1 然后就能看到我们上传的镜像 SSH远程登录这个镜像之前在本机docker内已经配好了ssh服务，讲道理应该启动则开启ssh但是不知为啥没有自动启动，以后再研究吧打开Workbench远程连接，启动ssh由于我启用ECI时开通了弹性公网IP，所以我可以通过这个IP:22用ssh来登录使用PuTTY工具登录成功！！多么令人振奋的一刻","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://winotmk.github.io/tags/hexo/"},{"name":"next","slug":"next","permalink":"https://winotmk.github.io/tags/next/"},{"name":"阿里云","slug":"阿里云","permalink":"https://winotmk.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"docker","slug":"docker","permalink":"https://winotmk.github.io/tags/docker/"}]},{"title":"WinNote","slug":"WinNote","date":"2023-07-27T03:01:24.866Z","updated":"2023-07-27T03:01:24.866Z","comments":true,"path":"WinNote/","link":"","permalink":"https://winotmk.github.io/WinNote/","excerpt":"","text":"一个轻量级MD文档收集博客，不保证阅读性使用树莓派+hexo构建，定制化next主题，github部署 一些编辑的Tips:首页文章预览至： 1&lt;!-- more --&gt; markdown paste粘图： 1ctrl+art+a 正式站：winotmk.com","categories":[],"tags":[{"name":"WinNote","slug":"WinNote","permalink":"https://winotmk.github.io/tags/WinNote/"}]},{"title":"next主题增加近期文章侧边栏","slug":"next主题增加近期文章侧边栏","date":"2023-07-26T16:00:00.000Z","updated":"2023-07-27T04:19:35.602Z","comments":true,"path":"next主题增加近期文章侧边栏/","link":"","permalink":"https://winotmk.github.io/next%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0%E4%BE%A7%E8%BE%B9%E6%A0%8F/","excerpt":"边栏显示文章列表效果我还奇怪next没用提供这样的功能，文章一多一篇篇翻实在是累，还好找到了有人实现最近文章的功能，那么做文章列表也就同理了我修改过的代码首先是： sidebar.njk/hexo-theme-next/layout/_macro/sidebar.njk在最后一个&#123;% endif %&#125;后面加入 12345678910111213141516171819&#123;% if theme.recent_posts.enable %&#125; &lt;div class=&quot;links-of-blogroll&quot; style=&quot;margin-top:20px; border-style:dotted none none none; padding-top:5px; text-align:left;padding-left: 20px; padding-right: 10px; padding-bottom: 5px;&quot;&gt; &lt;div class=&quot;links-of-blogroll-title&quot; style=&quot;padding-bottom: 5px; padding-top: 5px; padding-left: 0px; padding-right: 20px; font-size: 1.6em; argin-right: 5px;&quot;&gt; &lt;!-- 选择合适的icon --&gt; &#123;%- if theme.recent_posts.icon %&#125;&lt;i class=&quot;&#123;&#123; theme.recent_posts.icon &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&#123;%- endif %&#125; &lt;b style=&quot;font-size: 0.65em; padding-left: 8px; position: relative; top: -2px;&quot;&gt;&#123;&#123; theme.recent_posts.description &#125;&#125;&lt;/b&gt; &lt;/div&gt; &lt;ul class=&quot;links-of-blogroll-list&quot;&gt; &lt;!-- 文章排序规格,-updated 按照文章更新时间倒排 --&gt; &#123;% set posts = site.posts.sort(&#x27;-updated&#x27;).toArray() %&#125; &lt;!-- 显示20数目的文章 --&gt; &#123;% for post in posts.slice(&#x27;0&#x27;,&#x27;20&#x27;) %&#125; &lt;li class=&quot;postsSidebarNumb&quot; style=&quot;text-indent: -1em;&quot;&gt; &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt;&#123;% endif %&#125;","text":"边栏显示文章列表效果我还奇怪next没用提供这样的功能，文章一多一篇篇翻实在是累，还好找到了有人实现最近文章的功能，那么做文章列表也就同理了我修改过的代码首先是： sidebar.njk/hexo-theme-next/layout/_macro/sidebar.njk在最后一个&#123;% endif %&#125;后面加入 12345678910111213141516171819&#123;% if theme.recent_posts.enable %&#125; &lt;div class=&quot;links-of-blogroll&quot; style=&quot;margin-top:20px; border-style:dotted none none none; padding-top:5px; text-align:left;padding-left: 20px; padding-right: 10px; padding-bottom: 5px;&quot;&gt; &lt;div class=&quot;links-of-blogroll-title&quot; style=&quot;padding-bottom: 5px; padding-top: 5px; padding-left: 0px; padding-right: 20px; font-size: 1.6em; argin-right: 5px;&quot;&gt; &lt;!-- 选择合适的icon --&gt; &#123;%- if theme.recent_posts.icon %&#125;&lt;i class=&quot;&#123;&#123; theme.recent_posts.icon &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&#123;%- endif %&#125; &lt;b style=&quot;font-size: 0.65em; padding-left: 8px; position: relative; top: -2px;&quot;&gt;&#123;&#123; theme.recent_posts.description &#125;&#125;&lt;/b&gt; &lt;/div&gt; &lt;ul class=&quot;links-of-blogroll-list&quot;&gt; &lt;!-- 文章排序规格,-updated 按照文章更新时间倒排 --&gt; &#123;% set posts = site.posts.sort(&#x27;-updated&#x27;).toArray() %&#125; &lt;!-- 显示20数目的文章 --&gt; &#123;% for post in posts.slice(&#x27;0&#x27;,&#x27;20&#x27;) %&#125; &lt;li class=&quot;postsSidebarNumb&quot; style=&quot;text-indent: -1em;&quot;&gt; &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt;&#123;% endif %&#125; 出于美观我把一些css代码内嵌进去了其实不推荐这样做（寄 _config.yml/hexo-theme-next/_config.yml 12345# 近期文章配置 recent_posts: enable: true icon: fab fa-markdown description: 文章列表 main.styl/hexo-theme-next/source/css/main.styl是因为我想给文章列表加上计数，直接在css里用伪类做（要不是伪类不能html内嵌写进去我也不写这里 123456789//侧边栏计数伪类body &#123;counter-reset: postsSidebarNumbsection; &#125;.postsSidebarNumb::before &#123; counter-increment: postsSidebarNumbsection; content: counter(postsSidebarNumbsection) &quot;: &quot;;&#125; 一些搜集资料ps在查找的过程中发现提到这些的多半是next主题，而且别人的next主题都挺有意思的啊想搬！（爬 资料01：Hexo博客：(7)给NexT主题添加最新文章模块首先是这篇https://pickear.github.io/2020/04/12提到了：next/layout/_macro/sidebar.swig ,这个负责渲染侧边栏。在sidebar.swig的if theme.links的end if后面添加以下代码: 1234567891011121314151617&#123;% if theme.recent_posts %&#125;&lt;div class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.recent_posts_layout &#125;&#125;&quot;&gt; &lt;div class=&quot;links-of-blogroll-title&quot;&gt; &lt;!-- modify icon to fire by szw --&gt; &lt;i class=&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &#123;&#123; theme.recent_posts_title &#125;&#125; &lt;/div&gt; &lt;ul class=&quot;links-of-blogroll-list&quot;&gt; &#123;% set posts = site.posts.sort(&#x27;-date&#x27;) %&#125; &#123;% for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;) %&#125; &lt;li&gt; &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt;&lt;/div&gt;&#123;% endif %&#125; 然后在NexT主题目录下的_config.yaml配置文件，添加下面配置: 123recent_posts_title: 最新文章recent_posts_layout: blockrecent_posts: true 然而实际效果是只会显示“最新文章”几个字查了得知 NexT 的架構檔案格式從 swig 改成 njk，照著舊的文章貼上不會成功 资料02：[Day33] Hexo x NexT - 顯示最新文章、導入Google Analytics 的坑接着是这篇，感谢提到了next主题架构更变的问题https://ithelp.ithome.com.tw/articles/10283488?sc=iThomeR 左側選單顯示最新文章 NexT 已經有 hexo-related-popular-posts 套件來顯示最新文章列表的功能，但是這個套件似乎沒辦法正常運作，網路上有不少教學文章，但是 NexT 的架構檔案格式從 swig 改成 njk，照著舊的文章貼上不會成功，設定步驟如下： 在 sidebar.njk 檔案裡面加入下段程式碼（跟 swig 版本就只差了一個 .toArray() ） 1234567891011121314151617&#123;%- if theme.recent_posts %&#125; &lt;div class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.recent_posts_layout &#125;&#125;&quot;&gt; &lt;div class=&quot;links-of-blogroll-title&quot;&gt; &lt;!-- 設定你要的fa fa icon--&gt; &lt;i class=&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot; aria-hidden=&quot;true&quot; style=&quot;margin: 1rem 0.25rem 0.5rem 0&quot;&gt;&lt;/i&gt; &#123;&#123; theme.recent_posts_title &#125;&#125; &lt;/div&gt; &lt;ul class=&quot;links-of-blogroll-list&quot;&gt; &#123;%- set posts = site.posts.sort(&#x27;-date&#x27;) %&#125; &#123;%- for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;).toArray() %&#125; &lt;li&gt; &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;%- endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;%- endif %&#125; 资料03: Hexo-NexT 后续优化https://blog.yileaf.com/posts/15baca53/我最后使用的基本上参考了这篇的代码 侧边栏添加近期文章1.打开blog\\source\\_data\\sidebar.njk文件，加入以下代码： 12345678910111213141516171819&#123;% if theme.recent_posts.enable %&#125; &lt;div class=&quot;links-of-blogroll&quot;&gt; &lt;div class=&quot;links-of-blogroll-title&quot;&gt; &lt;!-- 选择合适的icon --&gt; &#123;%- if theme.recent_posts.icon %&#125;&lt;i class=&quot;&#123;&#123; theme.recent_posts.icon &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&#123;%- endif %&#125; &#123;&#123; theme.recent_posts.description &#125;&#125; &lt;/div&gt; &lt;ul class=&quot;links-of-blogroll-list&quot;&gt; &lt;!-- 文章排序规格,-updated 按照文章更新时间倒排 --&gt; &#123;% set posts = site.posts.sort(&#x27;-updated&#x27;).toArray() %&#125; &lt;!-- 显示四条近期文章 --&gt; &#123;% for post in posts.slice(&#x27;0&#x27;, &#x27;4&#x27;) %&#125; &lt;li&gt; &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt;&#123;% endif %&#125; 2.主题config.yml 12345# 近期文章配置 recent_posts: enable: true icon: fas fa-history description: 近期文章","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://winotmk.github.io/tags/hexo/"},{"name":"next","slug":"next","permalink":"https://winotmk.github.io/tags/next/"}]},{"title":"流量异常排查","slug":"流量异常排查","date":"2023-06-17T16:44:49.271Z","updated":"2023-06-17T16:44:49.271Z","comments":true,"path":"流量异常排查/","link":"","permalink":"https://winotmk.github.io/%E6%B5%81%E9%87%8F%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/","excerpt":"","text":"挖个坑。。。","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"}]},{"title":"生成秘钥连接至github————用来推hexo","slug":"生成秘钥连接至github_用来推hexo","date":"2023-06-17T16:44:48.621Z","updated":"2023-06-17T16:44:48.621Z","comments":true,"path":"生成秘钥连接至github_用来推hexo/","link":"","permalink":"https://winotmk.github.io/%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%87%B3github_%E7%94%A8%E6%9D%A5%E6%8E%A8hexo/","excerpt":"","text":"生成秘钥1ssh-keygen -t ed25519 -C &quot;550330147@qq.com&quot; 邮箱自然是我的git注册邮箱 如果修改passphrade密码1ssh-keygen -p -f ~/.ssh/id_ed25519 直接enter即密码为空，这是秘钥的密码 复制秘钥到github打开/root/.ssh/id_ed25519.pub复制到这里https://github.com/settings/ssh/new PS官方已不推荐用rsa加密 测试1ssh -T git@github.com 这里输入yes成功！","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"},{"name":"github","slug":"github","permalink":"https://winotmk.github.io/tags/github/"}]},{"title":"树莓派路由器","slug":"树莓派路由器","date":"2023-06-17T16:39:19.783Z","updated":"2023-06-17T16:39:19.783Z","comments":true,"path":"树莓派路由器/","link":"","permalink":"https://winotmk.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%B7%AF%E7%94%B1%E5%99%A8/","excerpt":"树莓派CM4的 openWrt web界面安装中文https://www.jianshu.com/p/da01ce070688更新包目录： 1opkg update 这里一开始我不行，ping1.1.1.1和ping8.8.8.8都ping不通，然后忽然想起自己的科学梯子路由网关是192.168.50.4改之!! 可能还不行这俩防火墙设置一下 如果还不行DNS记得指定一下 这下就能通了 PS也可以点配置opkg，然后加一条 1src/gz openwrt_packages https://mirrors.ustc.edu.cn/openwrt/releases/22.03.5/packages/aarch64_cortex-a72/packages/ 把源换为国内 然后 1opkg install luci-i18n-base-zh-cn 提示 1Configuring luci-i18n-base-zh-cn 再回来看web界面就已经是中文了","text":"树莓派CM4的 openWrt web界面安装中文https://www.jianshu.com/p/da01ce070688更新包目录： 1opkg update 这里一开始我不行，ping1.1.1.1和ping8.8.8.8都ping不通，然后忽然想起自己的科学梯子路由网关是192.168.50.4改之!! 可能还不行这俩防火墙设置一下 如果还不行DNS记得指定一下 这下就能通了 PS也可以点配置opkg，然后加一条 1src/gz openwrt_packages https://mirrors.ustc.edu.cn/openwrt/releases/22.03.5/packages/aarch64_cortex-a72/packages/ 把源换为国内 然后 1opkg install luci-i18n-base-zh-cn 提示 1Configuring luci-i18n-base-zh-cn 再回来看web界面就已经是中文了 如果要开启sftp传输服务https://github.com/twn39/code/issues/279 开启sftp的话可以很方便用WinSCP登录，文件管理神器那么如何启用 sftp 服务呢？先安装对应的软件： opkg install vsftpd openssh-sftp-server设置系统开启后自动启动 sftp 服务： 1/etc/init.d/vsftpd enable 启动 sftp 服务： 1/etc/init.d/vsftpd start 这样 Openwrt 就已经启用了 sftp 服务了，可以使用客户端进行文件的传输。 装网卡驱动我的CM4拓展板子是微雪的这个https://www.waveshare.net/wiki/CM4-DUAL-ETH-MINI有两个网口ETH0是原生ETH1是PCIe转出来的，需要安装RTL8111H芯片的网卡驱动，查了一下软件包里是有的https://openwrt.org/packages/pkgdata/kmod-r8169那么就好办了安装就行了： 1opkg install kmod-r8169 安装完成以重启openwrt我们看到这里已经读到了eth1口 设置路由器WAN口 添加新端口，设备选装好驱动以后出现的eth1，协议我选pppoe因为我拿路由拨号 如果要自己加安装包： 放到一个tmp目录里 CD到tmp目录 1opkg install *.ipk 关于扩容挂载点 参考资料： https://www.jianshu.com/p/e83459242afb https://blog.csdn.net/ls0111/article/details/128769859 PS我选的是树莓派cpu对应的ext4文件系统的固件，SQUASHFS就不碰了不熟悉 首先安装安装cfdisk，注意这里要先更新下opkg 12opkg updateopkg install cfdisk 然后打开cfdisk 1cfdisk 但是我打不开比如我的这块硬盘是内置EMMC硬盘, 显示名称是/dev/mmcblk0.一般的内置硬盘应该是/dev/sda之类的. 使用cfdisk命令，进入分区页面 1cfdisk /dev/mmcblk0 如果普通是内置硬盘 1cfdisk 按照参考资料中的教程一路继续做到格式化新分区就可以了，注意mmcblk0p3要替换成自己的盘符 1mkfs.ext4 /dev/mmcblk0p3 运行 1fdisk -l 或者 1df -h 命令，查看是否成功创建新分区。 然后在Luci web界面里面增加挂载点：我是直接从OpenWrt官网下的，不是修改版，所以木有这个选项。 12opkg updateopkg install block-mount 重启路由，界面会有挂载点出现，进入 挂载刚才格式化的硬盘以后 复制这段 1234567mkdir -p /tmp/introotmkdir -p /tmp/extrootmount --bind / /tmp/introotmount /dev/sda1 /tmp/extroottar -C /tmp/introot -cvf - . | tar -C /tmp/extroot -xf -umount /tmp/introotumount /tmp/extroot 其中的 1mount /dev/sda1 /tmp/extroot 要改为 1mount /dev/mmcblk0p3 /tmp/extroot 满血了！！","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"},{"name":"rashbeerypi","slug":"rashbeerypi","permalink":"https://winotmk.github.io/tags/rashbeerypi/"}]},{"title":"批处理实现批量改名以及SVN批量改名","slug":"bat","date":"2021-12-13T16:00:00.000Z","updated":"2021-12-16T07:32:31.656Z","comments":true,"path":"bat/","link":"","permalink":"https://winotmk.github.io/bat/","excerpt":"需求 注意Mesh和Texture前加了编号 工作需要整理目录文件，要将多组资产目录（Assets01,Assets02,Assets03…内的Resource目录下的Texture和Mesh目录加编号) 感觉这是一个可以用批处理脚本做到的事情，所以稍微研究了一下 改名实现如果单只是改名其实很简单，只需要几行即可实现： 1234@echo offfor /f &quot;delims=&quot; %%a in (&#x27;dir /ad/s/b &quot;Mesh&quot;&#x27;) do ren &quot;%%~a&quot; 01-Meshfor /f &quot;delims=&quot; %%b in (&#x27;dir /ad/s/b &quot;Texture&quot;&#x27;) do ren &quot;%%~b&quot; 00-Texturepause","text":"需求 注意Mesh和Texture前加了编号 工作需要整理目录文件，要将多组资产目录（Assets01,Assets02,Assets03…内的Resource目录下的Texture和Mesh目录加编号) 感觉这是一个可以用批处理脚本做到的事情，所以稍微研究了一下 改名实现如果单只是改名其实很简单，只需要几行即可实现： 1234@echo offfor /f &quot;delims=&quot; %%a in (&#x27;dir /ad/s/b &quot;Mesh&quot;&#x27;) do ren &quot;%%~a&quot; 01-Meshfor /f &quot;delims=&quot; %%b in (&#x27;dir /ad/s/b &quot;Texture&quot;&#x27;) do ren &quot;%%~b&quot; 00-Texturepause @echo off打开批处理黑窗口 for in do常用在查找匹配，满足条件后执行 dir /ad/s/b &quot;Mesh&quot;这行可以参考dir命令的用法，/ab在这里是只显示目录（如果是要显示文件是/a-d）/s显示目录和包含子目录，/b不显示日期大小等其他信息，&quot;Mesh&quot;会列出包含Mesh目录 pause这里会暂停一下按任意键继续 所以连起来就是列出包含Mesh和Texture的目录，然后用ren改名 SVN Rename批处理然而上面的简单改名这对于我遇到的实际情况不理想，有些资源是在SVN目录库里的，对于SVN来说，直接用ren等于删除Mesh旧目录，再新添加一个00-Mesh新目录，这会来带几个问题： log丢失，历史版本找不回来 如果文件多，占用空间很大，浪费大家带宽（每个人update会重新下载一遍） 所以最好是用SVN的命令来进行操作 然后发现用svn mv oldname newname就能完成 1svn mv Mesh 00-Mesh 移动，重命名，对svn来说都是这一个命令 所以大致思路就是用for in do来找到Mesh和Texture文件夹，然后用变量来做oldname和newname 12345678910111213141516171819202122232425@echo offsetlocal EnableDelayedExpansionfor /f &quot;delims=&quot; %%b in (&#x27;dir /ad/s/b &quot;Mesh&quot;&#x27;) do (set &quot;oldm=%%b&quot;set &quot;newm=!oldm:Mesh=00_Mesh!&quot;echo ------旧Mesh目录名称echo !oldm!echo ------新Mesh目录名称echo !newm!echo ------Mesh改名中...svn mv !oldm! !newm!)for /f &quot;delims=&quot; %%b in (&#x27;dir /ad/s/b &quot;Texture&quot;&#x27;) do (set &quot;oldt=%%b&quot;set &quot;newt=!oldt:Texture=01_Texture!&quot;echo ------旧Texture目录名称echo !oldt!echo ------新Texture目录名称echo !newt!echo ------Texture改名中...svn mv !oldt! !newt!)pause 一开始卡在变量这块很久，最后发现一定要有setlocal EnableDelayedExpansion，然后变量才可以在do()里用!oldm!这样，而不能用%oldm% set &quot;newm=!oldm:Mesh=00_Mesh!&quot;这行的操作是字符串替换，举例来说此时!oldm!为C:\\Users\\winte\\Desktop\\project\\Assets01\\Resource\\Mesh 会将此段字符串中的Mesh替换为00_Mesh,得到 C:\\Users\\winte\\Desktop\\project\\Assets01\\Resource\\00_Mesh 然后是一些交互上的完善，有个用到的结构 1234567@echo offecho 如需要撤销操作请按r,按其他任意键退出...set /p a=请输入r后回车:if &quot;%a%&quot;==&quot;r&quot; Goto abcexit /b:abc.... 这里有个判断，如果按下了r键，会触发Goto abc，然后跳转到:abc以下的脚本，否则会直接走exit /b退出脚本，很实用 一些Tips 将变量与批处理中的另一个变量的一部分匹配 https://www.thinbug.com/q/19056911 测试这段是好用的，用来检测一段字符串是否含有一段字符串 12345678910@echo offset &quot;h=Hello-World&quot;set &quot;f=This is a Hello-World test&quot;call set &quot;a=%%f:%h%=%%&quot;if not &quot;%a%&quot;==&quot;%f%&quot; goto :donepauseexit /b:doneecho it matchedpause 一个ping通隔段时间再ping，ping不通就关机的例子http://www.bathome.net/thread-12490-1-1.html 123456789101112131415161718@echo off:openping 192.168.1.90if %ERRORLEVEL%==0 goto Okif %ERRORLEVEL%==1 goto Noexit:Nocls&amp;echo 不通!关机操作shutdown -s -f -t 5000 ::5000秒后关机exit:Okcls&amp;echo.通，10分钟后再监测，请勿关闭本窗口ping 127.0.1 /n 600 &gt;nul ::600秒后执行检测goto open 如果要检测的是上段脚本执行以后的返回值，可以用到%ERRORLEVEL% https://www.jianshu.com/p/5e72aed76b71 不过%ERRORLEVEL%返回的是个数值，成功执行是0，不成功执行是非0，但是我用作svn命令执行判断的时候发现，有些指令即便不成功执行也返回0？懒得深究 找到另外一种方法直接判断返回的字符串 https://blog.csdn.net/hadsdn/article/details/78957361","categories":[],"tags":[{"name":"bat","slug":"bat","permalink":"https://winotmk.github.io/tags/bat/"}]},{"title":"SourceCraft服务器","slug":"MC","date":"2021-11-07T00:00:00.000Z","updated":"2023-08-25T03:29:47.943Z","comments":true,"path":"MC/","link":"","permalink":"https://winotmk.github.io/MC/","excerpt":"Java服务器地址：mc.winotmk.com:25465基岩服务器地址：mc.winotmk.com:19132 网站：Web地图：http://mcmap.winotmk.com","text":"Java服务器地址：mc.winotmk.com:25465基岩服务器地址：mc.winotmk.com:19132 网站：Web地图：http://mcmap.winotmk.com 服务器概况目前版本：spigot-1.20.1自有服务器，计划长期开服，主世界不清档，视情况可以增加副世界使用了Geyser插件，实现基岩版和Java版本同服，支持多种客户端，可以在手机和电脑上同时玩 （主机也行没测过 开服日期：2021-11-07容器化上云: 2023-08-25 世界结构：LobbyMainWorld -Nether -TheEndLyhWorld 现有传送门： Lobby去塔顶 Lobby去主世界（主传送门） Lobby去lyh存档世界 主世界往返湖边村落 更新log2023-08-25 版本由spigot-1.17.1更新至spigot-1.20.1 运行环境eci内运行，服务器文件nas上存储，环境和数据分离 服务器版本更新至1.20.1（顺带更新对应插件版本）禁用如下插件： PlaceholderAPI MiaoChat(被曝有后门) wolfyutilities ServerMinimap(似乎没啥用) Dynmap(web端地图，性能消耗巨大，体积巨大，暂移除) 常用玩家命令按T输入文本 第一次进服务器需要注册 1/reg 密码 密码 登录 1/l 密码 回主城lobby 1/spawn 回家（上次认得床） 1/home 回上次移动的地方（或上次死的地方) 1/back 移动到玩家身边（需要对方确认) 1/tpa 玩家名 开始首先选择一个版本如果你买过Windows版、主机，iPad之类的版本，可以选择基岩版或者在windows和MAC上玩Java版 附上Windows游戏购买链接java：https://www.minecraft.net/zh-hans/store/minecraft-java-edition基岩：https://www.minecraft.net/zh-hans/store/minecraft-windows10 Java版连接服务器如果购买过正版java版本直接进多人游戏输入服务器地址mc.winotmk.com:25465即可 如果没有购买这里提供原版纯净客户端： 链接：https://pan.baidu.com/s/1dl3mBgqhmvxPGMNVG2bRgw提取码：lijt 下载java运行环境https://www.oracle.com/java/technologies/downloads/#jdk17-windows 下载客户端运行HMCL登陆器 登录方式选离线模即可，写个名字，即游玩服务器时的名字 ps.如果启动失败请确保使用了java17 进游戏选择 第一次进服务器需要按T 然后输入/reg 密码 密码 注册 enjoy！ 基岩版连接服务器启动游戏选服务器，添加服务器 然后输入地址mc.winotmk.com端口19132 服务器插件列表以下部分玩家有兴趣可看 插件有功能类和玩法类多种，简单记录一下目前所有的插件 ActionHealth AncientGates AureliumSkills-Beta1.1.4 BlockLocker BossShopPro CatSeedLogin-1.3.9 Dynmap-3.2.1-spigot EssentialsX-2.19.0 EssentialsXChat-2.19.0 EssentialsXSpawn-2.19.0 Geyser-Spigot_基岩转发 GiftPack GSit LuckPerms-Bukkit-5.3.47 MiaoChat NekoMaid PocketGames Residence5.0.0.4 ServerMinimap Tree Feller-V2.2 Multiverse API前置类 CMILib1.0.4.2_圈地前置 PlaceholderAPI-2.10.10 SmartInvs-1.2.7 Vault Uniporter-1.3.2_Web管理前置 wolfyutilities-1.7.2.0 ActionHealth 在物品栏上显示血量https://www.spigotmc.org/resources/action-bar-health.2661/ AncientGates传送门 基础用法：本插件可以传送一切实体，包括玩家、运输工具、实体都能进入传送门这个插件不仅能跨服务器传送实体和输入指令，而且可以在进入另一个服务器时输入指令指令非常简单首先，需要输入指令打开功能：/gate setconf bungeeCordSupport true接下来你就可以使用任何关于BC的指令，创建传送门方法与普通的方法几乎无异/gate setto [id] [服务器] - 设置传送到的目的地/gate setbungeetype [id] [LOCATION/SERVER] - 在本地服务器上设置传送类型/gate addto [id] [服务器] - 添加传送到的服务器/gate remto [id] [服务器] - 删除可以传送到的服务器 https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=584063 AureliumSkills技能系统 15 种独特的技能 (耕作Farming, 锻造Foraging, 挖矿Mining, 钓鱼Fishing, 采掘(旧版本翻译为掘土)Excavation, 箭术Archery, 防御Defense, 战斗Fighting, 耐力Endurance, 敏捷Agility, 炼金Alchemy, 附魔Enchanting, 巫术Sorcery, 治愈Healing, 以及锻造Forging) 6 种玩家属性 (生命Health, 力量Strength, 再生Regeneration, 幸运Luck, 智慧Wisdom, 以及韧性Toughness) 简洁明了, 能显示详细信息的 GUI 能够自定义物品和盔甲上的特殊属性 自定义打怪, 采集和钓鱼获得的特殊物品(掉落表/道具池, 原文为 Loot Table) 经验值来源及大小均可修改,Beta 1.1.1以后不再支持 MythicMobs 自定义怪物作为经验来源 多语言支持 ActionBar 与 BossBar 位置显示 可供开发者使用的 API 支持 MySQL /skills 或 /skill 或 /sk - 打开技能菜单,详见MCBBSMCbbs搬运：https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=1094927https://www.spigotmc.org/resources/aurelium-skills-advanced-skills-stats-abilities-and-more.81069/ BlockLocker 上锁插件 使用方法 1. 放置木牌对于容器类: 只需放置木牌即可,[私有]和玩家名会被自动生成.对于门类: 放置木牌在门上或周围的方块上即可,内容会自动生成. 其他:你也可以自己添加锁定信息,按照生成木牌的格式填写即可~ 2.编辑木牌右击木牌,输入”/blocklocker &lt;行数&gt; &lt;文本&gt;”来编辑木牌.指令简写: “/bl” = “/blocklocker”,方法为: “/bl &lt;行数&gt; &lt;文本&gt;”.可添加其他字符来避免被识别为玩家名,例如 “~”. 3.信任其他玩家在第二步的 &lt;文本&gt; 内容中添加你要信任的玩家名即可.如果想添加两个以上的玩家名,再放置一个木牌即可,内容会自动添加.第二个木牌添加内容 “‘[更多使用者]’ ‘[所有人]’”.“[所有人]”标签将允许所有人访问容器.请更改. MCbbs搬运：https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=1173296https://www.spigotmc.org/resources/blocklocker.3268/ BossShopPro已移除商店系统 https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=829068商店页面编辑器：https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=1273221 CatSeedLogin 种子猫登录插件基岩入口和java入口都关闭了正版验证，所以加了登录插件来管理玩家的账号，此插件备选可替换AuthMe 登录 /login 密码 /l 密码注册密码 /register 密码 重复密码 /reg 密码 重复密码修改密码 /changepassword 旧密码 新密码 重复新密码 /changepw 旧密码 新密码 重复新密码 绑定邮箱 /bindemail set 邮箱 /bdmail set 邮箱用邮箱收到的验证码完成绑定 /bindemail verify 验证码 /bdmail verify 验证码忘记密码，请求服务器给自己绑定的邮箱发送重置密码的验证码 /resetpassword forget /repw forget用邮箱收到的验证码重置密码 /resetpassword re 验证码 新密码 /repw re 验证码 新密码 MCBBS:https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=847859 Dynmap 20230825更新：会消耗过多云服务资源暂移除 Web端卫星地图，还可3d显示，实时显示在线玩家位置，上帝视角 Mcbbs:https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=990539https://dynmap.us/builds/dynmap/ EssentialsX系列管理插件 https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=619883 Geyser-Spigot 该插件让基岩版玩家可以进入本服务器 https://geysermc.org/https://www.mcbbs.net/thread-973002-1-1.html GiftPack已移除礼包插件 https://www.mcbbs.net/thread-1141658-1-1.html GSit 座椅子插件 /gsit(/sit) 坐在方块上/glgy(/lay) 躺在方块上/gcrawl(/crawl) 趴在方块上/gsittoggle(/sittoggle) 开关右键坐下/gsitreload(/gsitrl) 重载插件配置 https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=1107053https://www.spigotmc.org/resources/gsit-modern-sit-seat-and-chair-lay-and-crawl-plugin-1-13-x-1-17-x.62325/ LuckPerms 权限管理https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=676818https://www.spigotmc.org/resources/luckperms.28140/ MiaoChat 聊天功能增加 20230825更新：移除，被曝有后台 聊天的时候输出%数字，代表展示手上物品%1-9 代表快捷物品栏1-9号格子的物品 https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=631240 NekoMaid Wed后台管理插件 https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=1230139 PocketGamesPo 34+口袋游戏|随时随地想玩就玩 玩家命令: /pocketgames|/pocket|/pg - 打开游戏菜单 /pg help - 打开插件帮助 /pg menu [玩家名] - 为指定玩家打开游戏菜单 /pg multiplayer [玩家名] - 为指定玩家打开多人游戏菜单 /pg spectate [玩家名] - 为指定玩家打开观战菜单 /pg play &lt;游戏ID&gt; [玩家名] - 让指定的玩家玩指定的游戏 /pg highscore &lt;游戏ID&gt; [玩家名] - 为指定玩家打开指定游戏的高分榜 /pg duel &lt;a/d/玩家名&gt; [游戏ID] - 接受邀请/拒绝邀请/邀请玩家进行多人游戏 /pg check &lt;玩家名&gt; - 检查玩家是否在玩游戏以及玩的什么游戏 /pg list - 插件的游戏列表 管理员命令: /pocketgamesadmin|/pga - 管理员帮助信息 /pga reset file &lt;文件名&gt; [只可填highscores.yml] /pga reset database [表] - 刷新数据库指定的表 /pga info - 插件信息 /pga reload - 重载插件 https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=913753 Residence 圈地插件 /res ? —— 查看帮助 https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=631343 Serverminimap小地图 20230825更新：似乎没啥用，移除 /minimap - 为您提供小地图项目/waypoint help [command] - 为您提供有关此命令的信息/waypoint add [x] [z] - 在您当前的位置或指定的 x 和 z 坐标上添加一个航点。/waypoint list - 列出所有航点及其索引/waypoint remove - 删除索引为 的航点。注意：删除航点时，索引会发生变化。/waypoint hide [true|false] - 切换航点的可见性，或将其设置为给定的布尔值。 /lp group admin permission set minimap.fastupdate/lp group admin permission set minimap.command.minimap/lp group admin permission set minimap.command.waypoint.help/lp group admin permission set minimap.command.waypoint.list/lp group admin permission set minimap.command.waypoint.add/lp group admin permission set minimap.command.waypoint.remove/lp group admin permission set minimap.command.waypoint.hide https://dev.bukkit.org/projects/serverminimap Tree Feller一键砍树插件 https://www.spigotmc.org/resources/tree-feller.92998/ Multiverse多世界插件 #命令语法 mv [FILTER] [PAGE #]#发送版本信息至控制台 mv version -[pbg]#列出所有世界名称 mv list#列出综合信息 mv info [WORLD] [PAGE]*/mv info [世界名称] [页码] #创建世界mv create {名字} {环境} -s [种子] -g [生成器[:ID]] -t [生成器] [-n] -a [true|false] #复制某个世界mv clone {目标} {名字} -g [生成器[:ID]] #转换某个世界的类型mv import {名字} {环境} -g [生成器[:ID]] [-n] #重新加载配置文件mv reload #重置当前世界的默认出生点为脚下mv setspawn mcbbs:https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=1016455 https://www.spigotmc.org/resources/multiverse-core.390/","categories":[],"tags":[{"name":"Minecraft","slug":"Minecraft","permalink":"https://winotmk.github.io/tags/Minecraft/"}]},{"title":"安装ArchLinux系统（详细过程）","slug":"安装Arch","date":"2021-10-25T14:36:22.119Z","updated":"2021-10-25T14:36:08.779Z","comments":true,"path":"安装Arch/","link":"","permalink":"https://winotmk.github.io/%E5%AE%89%E8%A3%85Arch/","excerpt":"参考文章：https://zhuanlan.zhihu.com/p/138951848 官方WIKI安装指南（上文和本文大致流程基于此）：https://wiki.archlinux.org/title/Installation_guide 家里旧笔记本淘汰装个Linux跑跑服务发挥余热，这里是彻底格式化硬盘新安装，而不需要多系统引导 我的环境有： 2核 Intel(R) Pentium(R) CPU 997 @ 1.60GHz 4GB 1600内存 UEFI启动（不能为BIOS） Samsang 850 EVO 250G 2.5寸SATA接口 无线网卡拆掉了，用得是网线 路由器上全局梯子（所以我没有换源，用官方源速度足够了） 准备镜像https://archlinux.org/download/下载发行版的Linux的ISO然后制作U盘启动，我是在mac下用balenaEtcher做的，操作非常方便","text":"参考文章：https://zhuanlan.zhihu.com/p/138951848 官方WIKI安装指南（上文和本文大致流程基于此）：https://wiki.archlinux.org/title/Installation_guide 家里旧笔记本淘汰装个Linux跑跑服务发挥余热，这里是彻底格式化硬盘新安装，而不需要多系统引导 我的环境有： 2核 Intel(R) Pentium(R) CPU 997 @ 1.60GHz 4GB 1600内存 UEFI启动（不能为BIOS） Samsang 850 EVO 250G 2.5寸SATA接口 无线网卡拆掉了，用得是网线 路由器上全局梯子（所以我没有换源，用官方源速度足够了） 准备镜像https://archlinux.org/download/下载发行版的Linux的ISO然后制作U盘启动，我是在mac下用balenaEtcher做的，操作非常方便 然后重启电脑从U盘启动 硬盘准备进入U盘系统后先连pacman试试 1pacman -Syyy 检查硬盘1lsblk 建立分区1cfdisk /dev/sda 选择New 回车，然后选择Write 回车 输入 yes 回车写入完成 选择Quit 回车退出 格式化将刚刚分好的区格式化为ext4格式，这里认准分区号sda1 1mkfs.ext4 /dev/sda1 挂载分区sda1 1mount /dev/sda1 /mnt 安装系统1pacstrap /mnt base linux linux-firmware nano 生成fstab文件1genfstab -U /mnt &gt;&gt; /mnt/etc/fstab 检查生成的fstab文件 1cat /mnt/etc/fstab 配置新系统切换到装好的系统1arch-chroot /mnt 设置时区1ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 设置locale1nano /etc/locale.gen Ctrl+W 输入 #en_US 回车 找到UTF-8那一行 删掉前面的# Ctrl+W 输入 #zh_CN 回车 找到UTF-8那一行 删掉前面的#Ctrl+X 然后Y保存退出生成locale 1locale-gen 创建并写入/etc/locale.conf文件 1nano /etc/locale.conf 填入内容，注意这里只能填这个 1LANG=en_US.UTF-8 创建并写入hostname1nano /etc/hostname 我这里名字叫WinArch保存退出 修改hosts1nano /etc/hosts 写入内容如图（中间的空白用tab而非空格），arch替换为你之前在hostname里写入的内容，其他都按照图里面的写（注意最后一行的ip是127.0.1.1） 保存退出 建议上述编辑的内容都用cat输出检查一下 root用户创建密码1passwd 然后输入并确认密码 装启动器和一些软件包含了一些常用到的软件 1pacman -S grub efibootmgr networkmanager network-manager-applet dialog wireless_tools wpa_supplicant os-prober mtools dosfstools ntfs-3g base-devel linux-headers reflector git sudo intel的cpu，需要安装intel的微码文件 1pacman -S intel-ucode 完成之后输入 1grub-install /dev/sda 注意是硬盘位置不是分区位置，硬盘上也只有刚刚安装的Arch系统 生成grub.cfg 1grub-mkconfig -o /boot/grub/grub.cfg 出现吧啦吧啦done就完成了 退出新系统重启12exitreboot 不装桌面环境的话，到这步即可使用了，后续需要什么再装不迟 新建用户并授权1useradd -m -G wheel winotmk 我的用户是winotkm，这里主要是创建一个非root的账户，桌面环境一般无法用root登陆的创建密码 1passwd winotmk 授权 1EDITOR=nano visudo Ctrl+W 输入 # %wheel 回车 找到这行 删除前面的 #（取消注释） 安装Display Server和Display Manager1pacman -S xorg 然后我喜欢KDE桌面，所以装： 1pacman -S sddm 设置开机启动 1systemctl enable sddm PS.取消开机启动是 1systemctl disable sddm 安装Desktop EnvironmentKDE： 1pacman -S plasma kde-applications packagekit-qt5 安装中文的字体 1pacman -S noto-fonts-cjk 好了，大功告成 1reboot","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"}]},{"title":"linux文件和目录权限","slug":"Linux权限","date":"2021-10-23T17:07:10.176Z","updated":"2021-10-23T17:07:10.176Z","comments":true,"path":"Linux权限/","link":"","permalink":"https://winotmk.github.io/Linux%E6%9D%83%E9%99%90/","excerpt":"*本文摘录整理为主 用ls -l查看权限： 12345678910111213141516171819202122232425262728293031323334353637383940文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwx--x--x 1 root wheel 6872 2 7 22:41 compressedPackage/drwxr-xr-x 1 liuml wheel 8620 2 15 09:32 wwwroot/ lrwxrwxrwx 1 liuml wheel 46 2 24 19:30 abc@ -&gt; home/abc-rwxr-xr-x 1 liuml wheel 68568 2 29 07:43 test* - 文件名栏位 文件后面的符号含义 - / ：表明是一个目录 - @ ：表明是到其它文件的符号链接 - * ：表明是一个可执行文件。- 对于权限设置的解释 - r 是读，w 是写，x 是执行 - 对应数字如下: - r = 4 w = 2 x = 1 - rwx ：4+2+1 = 7 - rw- ：4+2 = 6 - r-x ：4+1 = 5 - drwxr-xr-x ：755- 第 0-1位 文件类型 - “-” ：表示普通文件； - “d” ：表示目录； - “l” ：表示链接文件； - “p” ：表示管理文件； - “b” ：表示块设备文件； - “c” ：表示字符设备文件； - “s” ：表示套接字文件；- 第 2-4位 文件所有者权限 [User]- 第 5-7位 文件所有者所在组权限 [Group]- 第 8-10位 其他用户权限 [Others]- 没有的权限用 “-” 来表示————————————————版权声明：本文为CSDN博主「烟雨弥漫了江南」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/u010324331/article/details/88035175/","text":"*本文摘录整理为主 用ls -l查看权限： 12345678910111213141516171819202122232425262728293031323334353637383940文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwx--x--x 1 root wheel 6872 2 7 22:41 compressedPackage/drwxr-xr-x 1 liuml wheel 8620 2 15 09:32 wwwroot/ lrwxrwxrwx 1 liuml wheel 46 2 24 19:30 abc@ -&gt; home/abc-rwxr-xr-x 1 liuml wheel 68568 2 29 07:43 test* - 文件名栏位 文件后面的符号含义 - / ：表明是一个目录 - @ ：表明是到其它文件的符号链接 - * ：表明是一个可执行文件。- 对于权限设置的解释 - r 是读，w 是写，x 是执行 - 对应数字如下: - r = 4 w = 2 x = 1 - rwx ：4+2+1 = 7 - rw- ：4+2 = 6 - r-x ：4+1 = 5 - drwxr-xr-x ：755- 第 0-1位 文件类型 - “-” ：表示普通文件； - “d” ：表示目录； - “l” ：表示链接文件； - “p” ：表示管理文件； - “b” ：表示块设备文件； - “c” ：表示字符设备文件； - “s” ：表示套接字文件；- 第 2-4位 文件所有者权限 [User]- 第 5-7位 文件所有者所在组权限 [Group]- 第 8-10位 其他用户权限 [Others]- 没有的权限用 “-” 来表示————————————————版权声明：本文为CSDN博主「烟雨弥漫了江南」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/u010324331/article/details/88035175/ 图片来源：https://blog.csdn.net/zhuoya_/article/details/77418413 共显示了七列信息，从左至右依次为：权限、文件数、归属用户、归属群组、文件大小、创建日期、文件名称d ：第一位表示文件类型 第一位字符 文件类型 d 文件夹 - 普通文件 l 链接 b 块设备文件 p 管道文件 c 字符设备文件 s 套接口文件 rxw和数值权限的对应： rxw 数值 r(读) 4 w(写) 2 x(执行) 1 所以，例如：rwx rw- r–7 6 4三个一组,rwx权限分别对应421相加得7,rw-对应42相加,r–对应4 图片来源：http://man.linuxde.net/chmod 举例：-rw-r–r–，即为644权限6对应4+2 rw-4对应 r–那么这个文件的权限就是所有者rw-,所属组r–,其他人r– 常用的linux权限对应： 数值 rxw 444 r–r–r– 600 rw——- 644 rw-r–r– 666 rw-rw-rw- 700 rwx—— 744 rwxr–r– 755 rwxr-xr-x 777 rwxrwxrwx 命令修改权限 权限管理命令chmod 修改文件或者目录的权限全拼: change permissions mode of a file语法: 123456chmod [&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;] [文件或目录][mode=421] [文件或目录]-R 递归修改u:所有者, g:所属组,o:其他人,a:所有;+:添加权限,-减少权限,=直接赋值成这个权限 创建目录mkdir时加权限 1$ mkdir -m=r-- letter 上面的命令会创建一个名为 letter 的目录，同时为目录所有者、用户组和其他用户 针对该目录赋予只读权限 mkdir命令小参考：在 Linux 下用 mkdir 命令来创建目录和子目录 参考：linux权限drwxrwxrwx所代表的意义 linux ls -l命令显示详解 linux更改文件(夹)权限或所有者 Linux 文件权限查看及修改","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"}]},{"title":"ArchLinux命令集","slug":"ArchLinux命令","date":"2021-10-23T16:00:00.000Z","updated":"2023-07-27T03:53:22.260Z","comments":true,"path":"ArchLinux命令/","link":"","permalink":"https://winotmk.github.io/ArchLinux%E5%91%BD%E4%BB%A4/","excerpt":"刚装完archlinux后ifconfig无法使用? 1# pacman -S net-tools dnsutils inetutils iproute2 Archlinux开启ssh服务命令：12345# systemctl enable sshd.service 开机启动# systemctl start sshd.service 立即启动# systemctl restart sshd.service 立即重启 关于systemctl:https://wiki.archlinux.org/title/Systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87) 比如：关闭开机启用KDE桌面环境 1# systemctl disable sddm 切换到root用户：1# su","text":"刚装完archlinux后ifconfig无法使用? 1# pacman -S net-tools dnsutils inetutils iproute2 Archlinux开启ssh服务命令：12345# systemctl enable sshd.service 开机启动# systemctl start sshd.service 立即启动# systemctl restart sshd.service 立即重启 关于systemctl:https://wiki.archlinux.org/title/Systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87) 比如：关闭开机启用KDE桌面环境 1# systemctl disable sddm 切换到root用户：1# su 以下无用，应该是旧版本PuTTY密钥算法支持有限，请更新PuTTY。。 用PuTTY登录报错： couldn’t agree a host key algorithm 解决，生成密钥：（出处：https://forums.centos.org/viewtopic.php?t=52892 1234567# cd /etc/ssh# ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key# vi /etc/ssh/sshd_configUncomment this line:# HostKey /etc/ssh/ssh_host_dsa_key# chgrp ssh_keys ssh_host_dsa_key# service sshd restart 如果putty连接报Network error:connection refused关闭防火墙 1# systemctl start iptables 安装jre环境1# pacman -S jre8-openjdk 高版本mc需要高JDK 1# pacman -S jre17-openjdk 切换java版本 1# sudo archlinux-java set java-17-openjdk 查看java状态 1# java -version 启动一个mc服务器https://cloud.tencent.com/developer/article/1622545 1# java -Xms1024MB -Xmx2048MB -jar iserver.jar 设置中文环境1# vim /etc/locale.conf 增加以下内容LANG=zh_CN.UTF-8 下次重新登录就是中文啦。可以输入date查看日期，如果显示中文，就说明设置正常啦 关于linux任务前后台处理：https://blog.csdn.net/timonium/article/details/116245621https://www.cnblogs.com/xiaoleiel/p/8349675.html 正在前台运行的命令暂停且放到后台： 1# Ctrl+z 12# jobs ## 查看后台进程编号# jobs -l ##查看进程PID，可以配合kill干掉进程 bg在后台继续执行，fg调回前台执行 12# bg [作业编号]# fg [作业编号] 一开始就后台执行：https://www.cnblogs.com/linnuo/p/9084125.html 1# java -jar shareniu.jar &amp; &amp;代表在后台运行 1# nohup java -jar shareniu.jar &amp; nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行当用 nohup 命令执行作业时，缺省情况下该作业的所有输出被重定向到nohup.out的文件中，除非另外指定了输出文件。 ps：我觉得上面的后台操作不好用不如试试Screen https://blog.csdn.net/han0373/article/details/81352663 screen -S yourname -&gt; 新建一个叫yourname的sessionscreen -ls -&gt; 列出当前所有的sessionscreen -r yourname -&gt; 回到yourname这个sessionscreen -d yourname -&gt; 远程detach某个sessionscreen -d -r yourname -&gt; 结束当前session并回到yourname这个session 回到MCSManager的面板 1# screen -r mcsm 看进程123# ps aux或者# top 压缩https://www.jianshu.com/p/59d93f942506 123456789101101-.tar格式解包：# tar xvf FileName.tar打包：# tar cvf FileName.tar DirName（注：tar是打包，不是压缩！）02-.gz格式解压1：# gunzip FileName.gz解压2：# gzip -d FileName.gz压 缩：# gzip FileName03-.tar.gz格式解压：# tar zxvf FileName.tar.gz压缩：# tar zcvf FileName.tar.gz DirName","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"}]},{"title":"树莓派上架设TimeMachine服务","slug":"树莓派TimeMachine","date":"2021-10-13T16:14:56.708Z","updated":"2021-10-13T16:14:56.708Z","comments":true,"path":"树莓派TimeMachine/","link":"","permalink":"https://winotmk.github.io/%E6%A0%91%E8%8E%93%E6%B4%BETimeMachine/","excerpt":"命令前半参考：从此Mac上的文件再也不会丟了 后半参考：如何自己搭建一个Time Machine服务器 挂载硬盘目录 1sudo mount /dev/sda2 /mnt/WinSource 1.安装netatalk和avahi（自己感觉avahi不装也行 1sudo apt install netatalk avahi-daemon -y 2.创建账户wintm来访问TimeMachine，至少别用root，root访问不能！ 1useradd -c &quot;Time machine&quot; -m -s /bin/bash wintm 然后设置密码 1sudo passwd wintm","text":"命令前半参考：从此Mac上的文件再也不会丟了 后半参考：如何自己搭建一个Time Machine服务器 挂载硬盘目录 1sudo mount /dev/sda2 /mnt/WinSource 1.安装netatalk和avahi（自己感觉avahi不装也行 1sudo apt install netatalk avahi-daemon -y 2.创建账户wintm来访问TimeMachine，至少别用root，root访问不能！ 1useradd -c &quot;Time machine&quot; -m -s /bin/bash wintm 然后设置密码 1sudo passwd wintm 3.配置netatalk 1sudo nano /etc/netatalk/AppleVolumes.default 这个文件似乎一行代表一个服务可以在 12345# The line below sets some DEFAULT, starting with Netatalk 2.1.:DEFAULT: options:upriv,usedots# By default all users have access to their home directories.~/ &quot;Home Directory&quot; 下面加上一行 12/mnt/WinSource/TimeMachine WinMachine allow:wintm options:tm#挂在硬盘里的文件夹 afp服务名 允许wintm用户登陆 开启timemachine 4.重启服务 12sudo service netatalk restartsudo service avahi-daemon restart 一些坑 试图直接使用root账户连接，在这里卡了很久，还尝试在AppleVolumes.default设置里写上例如 /mnt/WinSource/TimeMachine WinMachine allow:root rwlist:root options:tm 翻到这篇：[NAS之旅]-基于Centos7搭建Netatalk为Windows增加AFP协议 才忽然醒悟，root用户是禁止登录AFP服务的，得嘞，新开个专门的用户吧 提到了新建一个用户来跑timemachine：如何自己搭建一个Time Machine服务器 一开始习惯将硬盘挂载到/root/WinSource，然鹅这似乎导致即便mac上TimeMachine连接上了也报错没法开始备份，想想也是wintm用户没有权限进root。。总结为避免不必要的麻烦以后硬盘不挂/root里，这里我挂进了/mnt ps:当时还试图对/root/WinSource使用chown 1sudo chown -R wintm:wintm /root/WinSource 见这篇：用树莓派实现 Time Capsule 无解，chown改不了WinSource目录的所有者，root强而有力，认输 补充连接NetaTalk官方文档和下载：http://netatalk.sourceforge.net/3.1/htmldocs/afp.conf.5.html AFP Netatalk 分享配置 (又名 Apple Time Machine). 使用netatalk打造一款属于自己的Time-Machine在线备份服务器","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"},{"name":"rashbeerypi","slug":"rashbeerypi","permalink":"https://winotmk.github.io/tags/rashbeerypi/"}]},{"title":"hexo+github","slug":"hexo+github","date":"2021-10-13T06:19:53.663Z","updated":"2021-10-13T06:19:53.663Z","comments":true,"path":"hexo+github/","link":"","permalink":"https://winotmk.github.io/hexo+github/","excerpt":"https://winotmk.github.io/ github：https://github.com/winotmk/winotmk.github.io 总有一些零碎的想法，需要记录下来，写全面的文章没有时间，不写下来又会忘，日记app又不方便整理，同时也想利用一下树莓派，网上搜索便发现hexo+github部署的方式，于是想尝试尝试，一路遇到很多问题 主要参考：基于树莓派搭建Hexo博客部署到GitHub/Gitee 前期第二参考：hexo——轻量、简易、高逼格的博客 更详细的安装过程：GitHub+Hexo 搭建个人网站详细教程 hexo官方文档：https://hexo.io/docs/ hexo博客文档（似乎和上面有不少内容重叠）：https://theme-next.js.org/docs/ 安装hexo下载armv7版本的node.js：nodejs下载","text":"https://winotmk.github.io/ github：https://github.com/winotmk/winotmk.github.io 总有一些零碎的想法，需要记录下来，写全面的文章没有时间，不写下来又会忘，日记app又不方便整理，同时也想利用一下树莓派，网上搜索便发现hexo+github部署的方式，于是想尝试尝试，一路遇到很多问题 主要参考：基于树莓派搭建Hexo博客部署到GitHub/Gitee 前期第二参考：hexo——轻量、简易、高逼格的博客 更详细的安装过程：GitHub+Hexo 搭建个人网站详细教程 hexo官方文档：https://hexo.io/docs/ hexo博客文档（似乎和上面有不少内容重叠）：https://theme-next.js.org/docs/ 安装hexo下载armv7版本的node.js：nodejs下载 配置githubgit key配置：github每次需要输入密码和用户名的问题… 取消使用key令牌后还要输入密码：取消 SSH 私钥密码 后期配置hexo配置官方文档：https://hexo.io/zh-cn/docs/configuration 主题Next主题github：https://github.com/next-theme/hexo-theme-next Next主题的文档(ps.页面样式好看可参考)：第三方服务集成 Next主题代码框高亮预览设置：https://theme-next.js.org/highlight/ 资产文件夹https://hexo.io/docs/asset-folders 访客统计DevOps 访客数统计 &amp; google analytics 数据分析 将文章视图添加到您的 Hexo 博客(有LeanCloud和Firebase比较分析） 给hexo博客文章添加阅读次数统计 hexo next主题的leancloud安全插件github：https://github.com/theme-nex… 上面链接的说明：Leancloud访客统计插件重大安全漏洞修复指南 Firebase:https://console.firebase.google… 评论畅言：https://changyan.kuaizhan.com/v3/changyan/overviewvaline：https://valine.js.org 其他配置vscode：本来都是用putty打指令，用WinSCP访问我的目录操作的，但是WinSCP自带的文本编辑过与拉跨，有几次多打空格没看出来导致直接hexo g失败，后来突发奇想为啥不找个轻量级的IDE直接去写这些呢，于是用起了vscode Vscode配置ftp连接远程服务器（上传本地文件） 不过自己测试发现不好用，于是用了SSH FS这个vscode插件 相对路径./与../区别","categories":[],"tags":[]},{"title":"MayaMASH动力学做链子","slug":"Maya_MASH","date":"2021-10-13T03:52:45.255Z","updated":"2021-10-13T03:52:45.255Z","comments":true,"path":"Maya_MASH/","link":"","permalink":"https://winotmk.github.io/Maya_MASH/","excerpt":"","text":"","categories":[],"tags":[{"name":"Testing","slug":"Testing","permalink":"https://winotmk.github.io/tags/Testing/"},{"name":"Another Tag","slug":"Another-Tag","permalink":"https://winotmk.github.io/tags/Another-Tag/"}]}],"categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://winotmk.github.io/tags/hexo/"},{"name":"next","slug":"next","permalink":"https://winotmk.github.io/tags/next/"},{"name":"阿里云","slug":"阿里云","permalink":"https://winotmk.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"eci","slug":"eci","permalink":"https://winotmk.github.io/tags/eci/"},{"name":"docker","slug":"docker","permalink":"https://winotmk.github.io/tags/docker/"},{"name":"WinNote","slug":"WinNote","permalink":"https://winotmk.github.io/tags/WinNote/"},{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"},{"name":"github","slug":"github","permalink":"https://winotmk.github.io/tags/github/"},{"name":"rashbeerypi","slug":"rashbeerypi","permalink":"https://winotmk.github.io/tags/rashbeerypi/"},{"name":"bat","slug":"bat","permalink":"https://winotmk.github.io/tags/bat/"},{"name":"Minecraft","slug":"Minecraft","permalink":"https://winotmk.github.io/tags/Minecraft/"},{"name":"Testing","slug":"Testing","permalink":"https://winotmk.github.io/tags/Testing/"},{"name":"Another Tag","slug":"Another-Tag","permalink":"https://winotmk.github.io/tags/Another-Tag/"}]}