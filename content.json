{"meta":{"title":"WinNote","subtitle":"","description":"零碎MD收集","author":"winotmk","url":"https://winotmk.github.io","root":"/"},"pages":[],"posts":[{"title":"linux文件和目录权限","slug":"Linux权限","date":"2021-10-12T17:02:29.193Z","updated":"2021-10-12T17:02:29.193Z","comments":true,"path":"2021/10/13/Linux权限/","link":"","permalink":"https://winotmk.github.io/2021/10/13/Linux%E6%9D%83%E9%99%90/","excerpt":"","text":"*本文摘录整理为主 用ls -l查看权限： 12345678910111213141516171819202122232425262728293031323334353637383940文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwx--x--x 1 root wheel 6872 2 7 22:41 compressedPackage/drwxr-xr-x 1 liuml wheel 8620 2 15 09:32 wwwroot/ lrwxrwxrwx 1 liuml wheel 46 2 24 19:30 abc@ -&gt; home/abc-rwxr-xr-x 1 liuml wheel 68568 2 29 07:43 test* - 文件名栏位 文件后面的符号含义 - / ：表明是一个目录 - @ ：表明是到其它文件的符号链接 - * ：表明是一个可执行文件。- 对于权限设置的解释 - r 是读，w 是写，x 是执行 - 对应数字如下: - r = 4 w = 2 x = 1 - rwx ：4+2+1 = 7 - rw- ：4+2 = 6 - r-x ：4+1 = 5 - drwxr-xr-x ：755- 第 0-1位 文件类型 - “-” ：表示普通文件； - “d” ：表示目录； - “l” ：表示链接文件； - “p” ：表示管理文件； - “b” ：表示块设备文件； - “c” ：表示字符设备文件； - “s” ：表示套接字文件；- 第 2-4位 文件所有者权限 [User]- 第 5-7位 文件所有者所在组权限 [Group]- 第 8-10位 其他用户权限 [Others]- 没有的权限用 “-” 来表示————————————————版权声明：本文为CSDN博主「烟雨弥漫了江南」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/u010324331/article/details/88035175/ 图片来源：https://blog.csdn.net/zhuoya_/article/details/77418413 共显示了七列信息，从左至右依次为：权限、文件数、归属用户、归属群组、文件大小、创建日期、文件名称d ：第一位表示文件类型 第一位字符 文件类型 d 文件夹 - 普通文件 l 链接 b 块设备文件 p 管道文件 c 字符设备文件 s 套接口文件 rxw和数值权限的对应： rxw 数值 r(读) 4 w(写) 2 x(执行) 1 所以，例如：rwx rw- r–7 6 4三个一组,rwx权限分别对应421相加得7,rw-对应42相加,r–对应4 图片来源：http://man.linuxde.net/chmod 举例：-rw-r–r–，即为644权限6对应4+2 rw-4对应 r–那么这个文件的权限就是所有者rw-,所属组r–,其他人r– 常用的linux权限对应： 数值 rxw 444 r–r–r– 600 rw——- 644 rw-r–r– 666 rw-rw-rw- 700 rwx—— 744 rwxr–r– 755 rwxr-xr-x 777 rwxrwxrwx 命令修改权限 权限管理命令chmod 修改文件或者目录的权限全拼: change permissions mode of a file语法: 123456chmod [&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;] [文件或目录][mode=421] [文件或目录]-R 递归修改u:所有者, g:所属组,o:其他人,a:所有;+:添加权限,-减少权限,=直接赋值成这个权限 创建目录mkdir时加权限 1$ mkdir -m=r-- letter 上面的命令会创建一个名为 letter 的目录，同时为目录所有者、用户组和其他用户 针对该目录赋予只读权限 mkdir命令小参考：在 Linux 下用 mkdir 命令来创建目录和子目录 参考：linux权限drwxrwxrwx所代表的意义 linux ls -l命令显示详解 linux更改文件(夹)权限或所有者 Linux 文件权限查看及修改","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"}]},{"title":"树莓派上架设TimeMachine服务","slug":"树莓派TimeMachine","date":"2021-10-12T16:33:16.520Z","updated":"2021-10-12T16:33:16.520Z","comments":true,"path":"2021/10/13/树莓派TimeMachine/","link":"","permalink":"https://winotmk.github.io/2021/10/13/%E6%A0%91%E8%8E%93%E6%B4%BETimeMachine/","excerpt":"","text":"命令前半参考：从此Mac上的文件再也不会丟了 后半参考：如何自己搭建一个Time Machine服务器 挂载硬盘目录 1sudo mount /dev/sda2 /mnt/WinSource 1.安装netatalk和avahi（自己感觉avahi不装也行 1sudo apt install netatalk avahi-daemon -y 2.创建账户wintm来访问TimeMachine，至少别用root，root访问不能！ 1useradd -c &quot;Time machine&quot; -m -s /bin/bash wintm 然后设置密码 1sudo passwd wintm 3.配置netatalk 1sudo nano /etc/netatalk/AppleVolumes.default 这个文件似乎一行代表一个服务可以在 12345# The line below sets some DEFAULT, starting with Netatalk 2.1.:DEFAULT: options:upriv,usedots# By default all users have access to their home directories.~/ &quot;Home Directory&quot; 下面加上一行 12/mnt/WinSource/TimeMachine WinMachine allow:wintm options:tm#挂在硬盘里的文件夹 afp服务名 允许wintm用户登陆 开启timemachine 4.重启服务 12sudo service netatalk restartsudo service avahi-daemon restart 一些坑 试图直接使用root账户连接，在这里卡了很久，还尝试在AppleVolumes.default设置里写上例如 /mnt/WinSource/TimeMachine WinMachine allow:root rwlist:root options:tm 翻到这篇：[NAS之旅]-基于Centos7搭建Netatalk为Windows增加AFP协议 才忽然醒悟，root用户是禁止登录AFP服务的，得嘞，新开个专门的用户吧 提到了新建一个用户来跑timemachine：如何自己搭建一个Time Machine服务器 一开始习惯将硬盘挂载到/root/WinSource，然鹅这似乎导致即便mac上TimeMachine连接上了也报错没法开始备份，想想也是wintm用户没有权限进root。。总结为避免不必要的麻烦以后硬盘不挂/root里，这里我挂进了/mnt ps:当时还试图对/root/WinSource使用chown 1sudo chown -R wintm:wintm /root/WinSource 见这篇：用树莓派实现 Time Capsule 无解，chown改不了WinSource目录的所有者，root强而有力，认输 补充连接NetaTalk官方文档和下载：http://netatalk.sourceforge.net/3.1/htmldocs/afp.conf.5.html AFP Netatalk 分享配置 (又名 Apple Time Machine). 使用netatalk打造一款属于自己的Time-Machine在线备份服务器","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"},{"name":"rashbeerypi","slug":"rashbeerypi","permalink":"https://winotmk.github.io/tags/rashbeerypi/"}]},{"title":"MayaMASH动力学做链子","slug":"Maya_MASH","date":"2021-10-09T08:55:38.375Z","updated":"2021-10-09T08:55:38.375Z","comments":true,"path":"2021/10/09/Maya_MASH/","link":"","permalink":"https://winotmk.github.io/2021/10/09/Maya_MASH/","excerpt":"","text":"","categories":[],"tags":[{"name":"Testing","slug":"Testing","permalink":"https://winotmk.github.io/tags/Testing/"},{"name":"Another Tag","slug":"Another-Tag","permalink":"https://winotmk.github.io/tags/Another-Tag/"}]},{"title":"内网穿透","slug":"nas内网穿透","date":"2021-10-06T05:09:33.981Z","updated":"2021-10-06T05:09:33.981Z","comments":true,"path":"2021/10/06/nas内网穿透/","link":"","permalink":"https://winotmk.github.io/2021/10/06/nas%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","excerpt":"","text":"起因因为疫情严重不得不在家办公，无奈TeamViewer很多软件打开都是白屏，稳定性也很是不爽，所以结合现有资源做了个内网穿透，将公司的电脑远程登陆地址映射到公网上，在家用windows自带的远程桌面连接，实测效果比TeamViewer好得多。 之前配NAS的时候，家里整过光猫，改成路由拨号所以有公网ip，也在nas上运行了ddns程序，另外这台群晖nas不出意外会一直开机（因为跑了文件存储和日记服务），这样一来就有现成的条件做内网穿透服务器了，搞起来~ 前期准备 公司电脑开机,且打开TeamViewer，配好之前还得使它 家里路由配好端口转发和ddns 住处有电脑 NAS上的配置登录DSM（群晖的网页系统，很nb），开启SSH 默认是22端口 在路由上设置转发 win+R输入cmd打开终端 1ssh 群晖登录账号@winotmk.***.net 输入密码回车登录。因为配了ddns直接输域名就好 1sudo -i //root权限，注意是由$变为# 用root登录 12cd /etc/sshchmod 755 sshd_config //赋权 1vim /etc/ssh/sshd_config 修改config文件，输入 i 编辑 将#PermitRootLogin prohibit password 修改为：PermitRootLogin yes 去掉#号 之后多按几下ESC 退出编辑模式，再输入 :wq 回车保存 1synouser --setpw root xxxxxxx 修改root密码，xxxx换成自己的 1reboot //重启群晖 现在可以直接用root登录ssh了 winscp登录用这个是因为我对linux指令不熟，图形界面很友好，可以本地制作好文件以后再上传运行，非常简单和ssh一样输入好地址就能连接用了，注意协议选SCP，第一次选的是SFTP，神奇的是也连上了，但是出现的是NAS的硬盘盘符而不是linux内部的路径，在这里懵了很久 服务端配置配置frpsgithub地址： https://github.com/fatedier/frp/releases 家里的双盘位群晖是arm的cpu所以选了frp_0.31.2_linux_arm.tar.gz 直接下载下来，解压，编辑frps.ini 12345[common]bind_port = 7000dashboard_port = 7500dashboard_user = admindashboard_pwd = admin 加了三行是打开了网页后台界面，可以康康frp的运行情况 当然，路由上也要给7000和7500添加端口转发 登录winscp 根目录下创建frp文件夹 （其实只用把frps相关的复制过去就好） 右键属性，给0755权限 启动frps打开终端，cd到/frp目录下 然后执行 1./frps -c ./frps.ini 出现巴拉巴拉success就是成功了 但是不能关闭终端，否则程序会关闭。一般来说我们是需要后台一直运行着的，所以我们使用nohup命令让其后台执行。 1nohup ./frps -c frps.ini ps:linux退出当前程序是ctrl+c或者q 设置群晖nas开机自动运行frps新增用户自定义脚本 如下图设置 设置脚本 1/frp/frps -c /frp/frps.ini 勾选保存 至此服务端的部分设置完成，可以通过http://****.net:7500/访问看见界面 ##客户端配置 下载frp_0.31.2_windows_386.zipwindows版本 解压修改frpc.ini 123456789[common]server_addr = winotmk.imwork.net //服务器地址server_port = 7000[yuanchengzhuomian] //名字自己起，根据需要可以多写type = tcp //远程桌面走的是tcplocal_ip = 127.0.0.1 //当然是本地ip，别写成服务器的了别问我为啥local_port = 3389 //本地端口，远程桌面默认是3389，想改去改注册表remote_port = 3389 //给外面访问的端口，需要在路由上配端口转发，不一定和上面本地端口一样 保存关闭，新建一个start.bat批处理，写上 1frpc.exe -c frpc.ini 保存运行就能启动客户端了 当然还有一个问题，那就是我们同样无法关闭dos命令框，如果关闭frp也同时被关闭了，所以我们需要同样需要后台执行，所以我找到了一种办法，可以使其后台运行。编写一个vbs脚本（这个方法我没试，出处 远程桌面ok折腾完了，现在直接点开公司电脑的此电脑右键属性，按下图设置，添加可以访问的用户 在自己电脑打开远程桌面，就可以连接了 做完了以后忽然想起来，我为什么不直接把住处的网络整成公网的呢，直接在住处架设frps，省的数据从望京发到昌平再传回望京2333 至少也可以把frps装在华硕路由上，和nas一样是arm架构，一样有ssh，还省去转发的过程","categories":[],"tags":[{"name":"Testing","slug":"Testing","permalink":"https://winotmk.github.io/tags/Testing/"},{"name":"Another Tag","slug":"Another-Tag","permalink":"https://winotmk.github.io/tags/Another-Tag/"}]},{"title":"hexo+github","slug":"hexo+github","date":"2021-10-06T05:03:51.162Z","updated":"2021-10-06T05:03:51.162Z","comments":true,"path":"2021/10/06/hexo+github/","link":"","permalink":"https://winotmk.github.io/2021/10/06/hexo+github/","excerpt":"","text":"https://winotmk.github.io/ github：https://github.com/winotmk/winotmk.github.io 总有一些零碎的想法，需要记录下来，写全面的文章没有时间，不写下来又会忘，日记app又不方便整理，同时也想利用一下树莓派，网上搜索便发现hexo+github部署的方式，于是想尝试尝试，一路遇到很多问题 主要参考：基于树莓派搭建Hexo博客部署到GitHub/Gitee 前期第二参考：hexo——轻量、简易、高逼格的博客 更详细的安装过程：GitHub+Hexo 搭建个人网站详细教程 hexo官方文档：https://hexo.io/docs/ hexo博客文档（似乎和上面有不少内容重叠）：https://theme-next.js.org/docs/ 安装hexo下载armv7版本的node.js：nodejs下载 配置githubgit key配置：github每次需要输入密码和用户名的问题… 取消使用key令牌后还要输入密码：取消 SSH 私钥密码 后期配置hexo配置官方文档：https://hexo.io/zh-cn/docs/configuration 主题Next主题github：https://github.com/next-theme/hexo-theme-next Next主题的文档(ps.页面样式好看可参考)：第三方服务集成 Next主题代码框高亮预览设置：https://theme-next.js.org/highlight/ 资产文件夹https://hexo.io/docs/asset-folders 访客统计DevOps 访客数统计 &amp; google analytics 数据分析 将文章视图添加到您的 Hexo 博客(有LeanCloud和Firebase比较分析） 给hexo博客文章添加阅读次数统计 hexo next主题的leancloud安全插件github：https://github.com/theme-nex… 上面链接的说明：Leancloud访客统计插件重大安全漏洞修复指南 Firebase:https://console.firebase.google… 评论畅言：https://changyan.kuaizhan.com/v3/changyan/overview 其他配置vscode：本来都是用putty打指令，用WinSCP访问我的目录操作的，但是WinSCP自带的文本编辑过与拉跨，有几次多打空格没看出来导致直接hexo g失败，后来突发奇想为啥不找个轻量级的IDE直接去写这些呢，于是用起了vscode Vscode配置ftp连接远程服务器（上传本地文件） 不过自己测试发现不好用，于是用了SSH FS这个vscode插件 相对路径./与../区别","categories":[],"tags":[]},{"title":"tags","slug":"tags","date":"2021-10-06T04:43:38.000Z","updated":"2021-10-06T05:02:20.852Z","comments":true,"path":"2021/10/06/tags/","link":"","permalink":"https://winotmk.github.io/2021/10/06/tags/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-09-29T02:43:25.537Z","updated":"2021-09-29T02:43:25.537Z","comments":true,"path":"2021/09/29/hello-world/","link":"","permalink":"https://winotmk.github.io/2021/09/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://winotmk.github.io/tags/linux/"},{"name":"rashbeerypi","slug":"rashbeerypi","permalink":"https://winotmk.github.io/tags/rashbeerypi/"},{"name":"Testing","slug":"Testing","permalink":"https://winotmk.github.io/tags/Testing/"},{"name":"Another Tag","slug":"Another-Tag","permalink":"https://winotmk.github.io/tags/Another-Tag/"}]}